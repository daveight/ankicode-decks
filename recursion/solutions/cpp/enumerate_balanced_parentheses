```cxx
class Solution {
public:
    vector<string> generateBalancedParentheses(int numPairs) {
        shared_ptr<vector<string>> result = make_shared<vector<string>>();
        directedGenerateBalancedParentheses(numPairs, numPairs, "", result);
        return *result;
    }
private:
    void directedGenerateBalancedParentheses(int numLeftParensNeeded,
                                             int numRightParensNeeded,
                                             string validPrefix,
                                             shared_ptr<vector<string>> result) {
        if (numRightParensNeeded == 0) {
            result->push_back(validPrefix);
            return;
        }

        if (numLeftParensNeeded > 0) { // Able to insert '('.
            directedGenerateBalancedParentheses(numLeftParensNeeded - 1, numRightParensNeeded, validPrefix + "(", result);
        }
        if (numLeftParensNeeded < numRightParensNeeded) { // Able to insert ')'.
            directedGenerateBalancedParentheses(numLeftParensNeeded, numRightParensNeeded - 1, validPrefix + ")", result);
        }
    }
};
```
