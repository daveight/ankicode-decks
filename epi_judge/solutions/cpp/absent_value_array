```cxx
#include <bitset>
#include <stdexcept>
#include <vector>

using std::bitset;
using std::vector;

class Solution {

public:
    int findMissingElement(const vector<int> &stream) {
        return find(cbegin(stream), cend(stream));
    }

private:
    int find(vector<int>::const_iterator stream_begin,
             const vector<int>::const_iterator &stream_end) {
        const int kNumBucket = 1 << 16;
        vector<size_t> counter(kNumBucket, 0);
        vector<int>::const_iterator stream_begin_copy = stream_begin;
        while (stream_begin != stream_end) {
            int upper_part_x = *stream_begin >> 16;
            ++counter[upper_part_x];
            ++stream_begin;
        }

        // Look for a bucket that contains less than (1 << 16) elements.
        const int kBucketCapacity = 1 << 16;
        int candidate_bucket;
        for (int i = 0; i < kNumBucket; ++i) {
            if (counter[i] < kBucketCapacity) {
                candidate_bucket = i;
                break;
            }
        }

        // Finds all IP addresses in the stream whose first 16 bits
        // are equal to candidate_bucket.
        bitset<kBucketCapacity> candidates;
        stream_begin = stream_begin_copy;
        while (stream_begin != stream_end) {
            int x = *stream_begin++;
            if (int upper_part_x = x >> 16; candidate_bucket == upper_part_x) {
                // Records the presence of 16 LSB of x.
                int lower_part_x = ((1 << 16) - 1) & x;
                candidates.set(lower_part_x);
            }
        }

        // At least one of the LSB combinations is absent, find it.
        for (int i = 0; i < kBucketCapacity; ++i) {
            if (candidates[i] == 0) {
                return (candidate_bucket << 16) | i;
            }
        }

        throw invalid_argument("no missing element");
    }
};
```
