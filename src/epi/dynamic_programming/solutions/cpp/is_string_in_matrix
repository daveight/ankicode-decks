```cxx
#include <algorithm>
#include <memory>
#include <tuple>
#include <unordered_set>
#include <vector>

using std::get;
using std::hash;
using std::make_tuple;
using std::make_unique;
using std::tuple;
using std::unordered_set;
using std::vector;

class Solution {
public:
    struct HashTuple {
        size_t operator()(const tuple<int, int, int> &t) const {
            return hash<int>()(get<0>(t) ^ get<1>(t) * 1021 ^ get<2>(t) * 1048573);
        }
    };
    
    bool isPatternContainedInGrid(const vector<vector<int>> &grid, const vector<int> &pattern) {
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[i].size(); ++j) {
                if (IsPatternSuffixContainedStartingAtXY(
                        grid, i, j, pattern, 0,
                        make_unique<unordered_set<tuple<int, int, int>, HashTuple>>()
                                .get())) {
                    return true;
                }
            }
        }
        return false;
    }
private:
    // Each entry in previous_attempts is a point in the grid and suffix of
    // pattern (identified by its offset). Presence in previous_attempts indicates
    // the suffix is not contained in the grid starting from that point.
    bool isPatternSuffixContainedStartingAtXY(
            const vector<vector<int>> &grid, int x, int y, const vector<int> &pattern,
            int offset,
            unordered_set<tuple<int, int, int>, HashTuple> *previous_attempts) {
        if (pattern.size() == offset) {
            // Nothing left to complete.
            return true;
        }
        // Check if (x, y) lies outside the grid.
        if (x < 0 || x >= grid.size() || y < 0 || y >= grid[x].size() ||
            previous_attempts->find(make_tuple(x, y, offset)) !=
            cend(*previous_attempts) ||
            grid[x][y] != pattern[offset]) {
            return false;
        }
    
        if (isPatternSuffixContainedStartingAtXY(grid, x - 1, y, pattern, offset + 1,
                                                 previous_attempts) ||
            isPatternSuffixContainedStartingAtXY(grid, x + 1, y, pattern, offset + 1,
                                                 previous_attempts) ||
            isPatternSuffixContainedStartingAtXY(grid, x, y - 1, pattern, offset + 1,
                                                 previous_attempts) ||
            isPatternSuffixContainedStartingAtXY(grid, x, y + 1, pattern, offset + 1,
                                                 previous_attempts)) {
            return true;
        }
        previous_attempts->emplace(x, y, offset);
        return false;
    }
};
```