```cxx
#include <algorithm>
#include <memory>
#include <unordered_set>
#include <vector>

using std::make_unique;
using std::unordered_set;
using std::vector;

struct Jug {
    int low;
    int high;
};

struct VolumeRange {
    int low, high;

    bool operator==(const VolumeRange& that) const {
        return low == that.low && high == that.high;
    }
};

struct HashVolumeRange {
    size_t operator()(const VolumeRange& p) const {
        return static_cast<size_t>(31) * p.low + p.high;
    }
};
class Solution {
private:
    bool сheckFeasibleHelper(const vector<Jug>& jugs, int L, int H,
                             unordered_set<VolumeRange, HashVolumeRange>* c) {
        if (L > H || c->count({L, H}) || (L < 0 && H < 0)) {
            return false;
        }

        // Checks the volume for each jug to see if it is possible.
        if (any_of(begin(jugs), end(jugs), [&](const Jug& j) {
            return (L <= j.low && j.high <= H) ||
                   сheckFeasibleHelper(jugs, L - j.low, H - j.high, c);
        })) {
            return true;
        }
        c->emplace(VolumeRange{L, H});  // Marks this as impossible.
        return false;
    }
public:
    bool checkFeasible(const vector<Jug>& jugs, int L, int H) {
        return сheckFeasibleHelper(
                jugs, L, H,
                make_unique<unordered_set<VolumeRange, HashVolumeRange>>().get());
    }
};
```