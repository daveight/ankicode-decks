```java
public class Solution {

    public String getPermutation(int n, int k) {
        StringBuilder result = new StringBuilder();

        // calculate (n-1)!
        // for the 1st digit in result, there are n choices (i.e. buckets),
        // and each bucket has (n - 1) sub-buckets.
        int bucketSize = 1;
        for (int i = 1; i < n; i++) {
            bucketSize *= i;
        }

        // all digits in permutation
        List<Integer> digits = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            digits.add(i + 1);
        }
        int q = n - 1;
        while (digits.size() != 0) {
            int iBucket = (k - 1) / bucketSize;
            k = (k - 1) % bucketSize + 1;

            result.append(digits.get(iBucket));
            digits.remove(iBucket);
            if (q == 0) {
                bucketSize = 1;
            } else {
                bucketSize /= q;
            }
            q--;
        }
        return result.toString();
    }
}
```