```java
class CharWithFrequency {
    public String chr;
    public double freq;
}

class BinaryTree implements Comparable<BinaryTree> {
    public double aggregateFreq;
    public CharWithFrequency s;
    public BinaryTree left, right;

    public BinaryTree(double aggregateFreq, CharWithFrequency s,
                      BinaryTree left, BinaryTree right) {
        this.aggregateFreq = aggregateFreq;
        this.s = s;
        this.left = left;
        this.right = right;
    }

    @Override
    public int compareTo(BinaryTree o) {
        return Double.compare(aggregateFreq, o.aggregateFreq);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof BinaryTree)) {
            return false;
        }
        return this == obj ? true
                : aggregateFreq == ((BinaryTree) obj).aggregateFreq;
    }

    @Override
    public int hashCode() {
        return Objects.hash(aggregateFreq);
    }
}

public class Solution {
    public double huffmanEncoding(List<CharWithFrequency> symbols) {
        PriorityQueue<BinaryTree> candidates = new PriorityQueue<>();
        // Add leaves for symbols.
        for (CharWithFrequency s : symbols) {
            candidates.add(new BinaryTree(s.freq, s, null, null));
        }

        // Keeps combining two nodes until there is one node left, which is the
        // root.
        while (candidates.size() > 1) {
            BinaryTree left = candidates.remove();
            BinaryTree right = candidates.remove();
            candidates.add(new BinaryTree(left.aggregateFreq + right.aggregateFreq,
                    null, left, right));
        }

        Map<Character, String> huffmanEncoding = new HashMap<>();
        // Traverses the binary tree, assigning codes to nodes.
        assignHuffmanCode(candidates.peek(), new StringBuilder(), huffmanEncoding);
        return symbols.stream()
                .mapToDouble(s -> huffmanEncoding.get(s.chr.charAt(0)).length() * s.freq / 100.0)
                .sum();
    }

    private void assignHuffmanCode(BinaryTree tree, StringBuilder code, Map<Character, String> huffmanEncoding) {
        if (tree != null) {
            if (tree.s != null) {
                // This node is a leaf.
                huffmanEncoding.put(tree.s.chr.charAt(0), code.toString());
            } else { // Non-leaf node.
                code.append('0');
                assignHuffmanCode(tree.left, code, huffmanEncoding);
                code.setLength(code.length() - 1);
                code.append('1');
                assignHuffmanCode(tree.right, code, huffmanEncoding);
                code.setLength(code.length() - 1);
            }
        }
    }
}
```
