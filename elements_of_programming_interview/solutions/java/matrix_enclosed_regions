```java
import java.util.ArrayDeque;
import java.util.List;
import java.util.Queue;

public class Solution {
    public List<List<String>> fillSurroundedRegions(List<List<String>> board) {

        // Identifies the regions that are reachable via white path starting from
        // the first or last columns.
        for (int i = 0; i < board.size(); ++i) {
            markBoundaryRegion(i, 0, board);
            markBoundaryRegion(i, board.get(i).size() - 1, board);
        }
        // Identifies the regions that are reachable via white path starting from
        // the first or last rows.
        for (int j = 0; j < board.get(0).size(); ++j) {
            markBoundaryRegion(0, j, board);
            markBoundaryRegion(board.size() - 1, j, board);
        }

        // Marks the surrounded white regions as black.
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board.get(i).size(); ++j) {
                board.get(i).set(j, board.get(i).get(j) != "T" ? "B" : "W");
            }
        }
        return board;
    }

    private class Coordinate {
        public Integer x;
        public Integer y;

        public Coordinate(Integer x, Integer y) {
            this.x = x;
            this.y = y;
        }
    }

    private void markBoundaryRegion(int i, int j, List<List<String>> board) {
        Queue<Coordinate> q = new ArrayDeque<>();
        q.add(new Coordinate(i, j));
        // Uses BFS to traverse this region.
        while (!q.isEmpty()) {
            Coordinate curr = q.poll();
            if (curr.x >= 0 && curr.x < board.size() && curr.y >= 0 &&
                    curr.y < board.get(curr.x).size() &&
                    board.get(curr.x).get(curr.y).equals("W")) {
                board.get(curr.x).set(curr.y, "T");
                q.add(new Coordinate(curr.x - 1, curr.y));
                q.add(new Coordinate(curr.x + 1, curr.y));
                q.add(new Coordinate(curr.x, curr.y - 1));
                q.add(new Coordinate(curr.x, curr.y + 1));
            }
        }
    }
}
```