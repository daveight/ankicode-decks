```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    private BinaryTreeNode<Integer> head;

    public BinaryTreeNode<Integer> mergeTwoBSTs(BinaryTreeNode<Integer> A, BinaryTreeNode<Integer> B){
        A = bstToDoublyLinkedList(A);
        B = bstToDoublyLinkedList(B);
        A.left.right = null;
        B.left.right = null;
        A.left = null;
        B.left = null;

        int ALength = countLength(A);
        int BLength = countLength(B);

        return buildSortedDoublyLinkedList(mergeTwoSortedLinkedLists(A, B),
                ALength + BLength);
    }

    private BinaryTreeNode<Integer> mergeTwoSortedLinkedLists(BinaryTreeNode<Integer> A, BinaryTreeNode<Integer> B) {
        BinaryTreeNode<Integer> dummyHead = new BinaryTreeNode<>();
        BinaryTreeNode<Integer> current = dummyHead;
        BinaryTreeNode<Integer> p1 = A;
        BinaryTreeNode<Integer> p2 = B;

        while (p1 != null && p2 != null) {
            if (Integer.compare(p1.data, p2.data) < 0) {
                current.right = p1;
                p1 = p1.right;
            } else {
                current.right = p2;
                p2 = p2.right;
            }
            current = current.right;
        }

        if (p1 != null) {
            current.right = p1;
        }
        if (p2 != null) {
            current.right = p2;
        }
        return dummyHead.right;
    }

    // Count the list length till end.
    private <T> int countLength(BinaryTreeNode<T> L) {
        int length = 0;
        while (L != null) {
            ++length;
            L = L.right;
        }
        return length;
    }

    private <T> BinaryTreeNode<T> bstToDoublyLinkedList(BinaryTreeNode<T> n) {
        // Empty subtree.
        if (n == null) {
            return null;
        }

        // Recursively build the list from left and right subtrees.
        BinaryTreeNode<T> lHead = bstToDoublyLinkedList(n.left);
        BinaryTreeNode<T> rHead = bstToDoublyLinkedList(n.right);

        // Append n to the list from left subtree.
        BinaryTreeNode<T> lTail = null;
        if (lHead != null) {
            lTail = lHead.left;
            lTail.right = n;
            n.left = lTail;
            lTail = n;
        } else {
            lHead = lTail = n;
        }

        // Append the list from right subtree to n.
        BinaryTreeNode<T> rTail = null;
        if (rHead != null) {
            rTail = rHead.left;
            lTail.right = rHead;
            rHead.left = lTail;
        } else {
            rTail = lTail;
        }
        rTail.right = lHead;
        lHead.left = rTail;

        return lHead;
    }

    private BinaryTreeNode<Integer> buildSortedDoublyLinkedList(BinaryTreeNode<Integer> L, int n) {
        head = L;
        return buildSortedDoublyLinkedListHelper(0, n);
    }

    private BinaryTreeNode<Integer> buildSortedDoublyLinkedListHelper(int s, int e) {
        if (s >= e) {
            return null;
        }

        int m = s + ((e - s) / 2);
        BinaryTreeNode<Integer> left = buildSortedDoublyLinkedListHelper(s, m);
        BinaryTreeNode<Integer> curr = new BinaryTreeNode<>();
        curr.data = head.data;
        head = head.right;
        curr.left = left;
        curr.right = buildSortedDoublyLinkedListHelper(m + 1, e);
        return curr;
    }
}
```