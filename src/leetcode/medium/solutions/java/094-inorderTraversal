```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    // more concise version compared to my verbose one
    public List<Integer> inorderTraversal(BinaryTreeNode<Integer> root) {
        List<Integer> result = new ArrayList<>();
        Stack<BinaryTreeNode<Integer>> stack = new Stack<>();
        BinaryTreeNode<Integer> node = root;
        while (node != null || !stack.empty()) {
            // push left nodes into stack
            while (node != null) {
                stack.push(node);
                node = node.left;
            }
            node = stack.pop();
            result.add(node.data);
            // ! key step: invoke recursive call on node's right child
            node = node.right;
        }
        return result;
    }

//    public List<Integer> inorderTraversal(BinaryTreeNode<Integer> root) {
//        List<Integer> result = new ArrayList<>();
//        if (root == null) {
//            return result;
//        }
//        Stack<BinaryTreeNode<Integer>> stack = new Stack<>();
//        BinaryTreeNode<Integer> node = root;
//        while (node != null) {
//            stack.push(node);
//            node = node.left;
//        }
//        
//        while (!stack.empty()) {
//            node = stack.pop();
//            result.add(node.val);
//            if (node.right != null) {
//                node = node.right;
//                while (node != null) {
//                    stack.push(node);
//                    node = node.left;
//                }
//            }
//        }
//        return result;
//    }
}
```