```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    // Input nodes are nonempty and the key at s is less than or equal to that at
    // b.
    public Integer findLCA(BinaryTreeNode<Integer> tree, Integer s, Integer b) {
        BinaryTreeNode<Integer> p = tree;
        while (p.data < s || p.data > b) {
            // Keep searching since p is outside of [s, b].
            while (p.data < s) {
                p = p.right; // LCA must be in p's right child.
            }
            while (p.data > b) {
                p = p.left; // LCA must be in p's left child.
            }
        }
        // Now, s >= p.data && p.data <= b.
        return p.data;
    }
}
```