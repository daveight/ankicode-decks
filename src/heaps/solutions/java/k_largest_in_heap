```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.PriorityQueue;
import java.util.function.BiPredicate;

public class Solution {
    private class HeapEntry {
        public Integer index;
        public Integer value;

        public HeapEntry(Integer index, Integer value) {
            this.index = index;
            this.value = value;
        }
    }

    private final int DEFAULT_INITIAL_CAPACITY = 16;

    public List<Integer> kLargestInBinaryHeap(List<Integer> A, int k) {
        if (k <= 0) {
            return Collections.emptyList();
        }

        // Stores the (index, value)-pair in candidateMaxHeap. This heap is
        // ordered by the value field.
        PriorityQueue<HeapEntry> candidateMaxHeap =
                new PriorityQueue<>(DEFAULT_INITIAL_CAPACITY, (o1, o2) -> Integer.compare(o2.value, o1.value));
        candidateMaxHeap.add(new HeapEntry(0, A.get(0)));
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < k; ++i) {
            Integer candidateIdx = candidateMaxHeap.peek().index;
            result.add(candidateMaxHeap.remove().value);

            Integer leftChildIdx = 2 * candidateIdx + 1;
            if (leftChildIdx < A.size()) {
                candidateMaxHeap.add(new HeapEntry(leftChildIdx, A.get(leftChildIdx)));
            }
            Integer rightChildIdx = 2 * candidateIdx + 2;
            if (rightChildIdx < A.size()) {
                candidateMaxHeap.add(
                        new HeapEntry(rightChildIdx, A.get(rightChildIdx)));
            }
        }
        return result;
    }

    public BiPredicate<List<Integer>, List<Integer>> comp =
            (expected, result) -> {
        if (result == null) {
            return false;
        }
        Collections.sort(expected);
        Collections.sort(result);
        return expected.equals(result);
    };
}
```