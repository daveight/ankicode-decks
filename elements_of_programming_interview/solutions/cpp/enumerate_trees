```cxx
#include <algorithm>
#include <memory>
#include <stack>
#include <vector>

using std::make_shared;
using std::vector;

template <typename T>

struct BinaryTreeNode {
    T data;
    shared_ptr<BinaryTreeNode<T>> left;
    shared_ptr<BinaryTreeNode<T>> right;
    BinaryTreeNode() { }
    BinaryTreeNode(T data, shared_ptr<BinaryTreeNode<T>> left, shared_ptr<BinaryTreeNode<T>> right) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
};

class Solution {
public:
    vector<vector<int>> generateAllBinaryTrees(int num_nodes) {
        auto result = doGenerateAllBinaryTrees(num_nodes);

        vector<vector<int>> serialized;
        for (auto &x : result) {
            serialized.push_back(SerializeStructure(x));
        }
        std::sort(begin(serialized), end(serialized));
        return serialized;
    }

private:
    vector<shared_ptr<BinaryTreeNode<int>>> doGenerateAllBinaryTrees(int num_nodes) {
        vector<shared_ptr<BinaryTreeNode<int>>> result;
        if (num_nodes == 0) {  // Empty tree, add as an nullptr.
            result.emplace_back(nullptr);
        }
    
        for (int num_left_tree_nodes = 0; num_left_tree_nodes < num_nodes;
             ++num_left_tree_nodes) {
            int num_right_tree_nodes = num_nodes - 1 - num_left_tree_nodes;
            auto left_subtrees = doGenerateAllBinaryTrees(num_left_tree_nodes);
            auto right_subtrees = doGenerateAllBinaryTrees(num_right_tree_nodes);
            // Generates all combinations of left_subtrees and right_subtrees.
            for (auto &left : left_subtrees) {
                for (auto &right : right_subtrees) {
                    result.emplace_back(make_shared<BinaryTreeNode<int>>(
                            BinaryTreeNode<int>{0, Clone(left), Clone(right)}));
                }
            }
        }
        return result;
    }
    
    shared_ptr<BinaryTreeNode<int>> Clone(
            const shared_ptr<BinaryTreeNode<int>> &tree) {
        return tree ? make_shared<BinaryTreeNode<int>>(BinaryTreeNode<int>{
                0, Clone(tree->left), Clone(tree->right)})
                    : nullptr;
    }
    
    vector<int> SerializeStructure(const shared_ptr<BinaryTreeNode<int>> &tree) {
        vector<int> result;
    
        std::stack<BinaryTreeNode<int> *> stack;
        stack.push(tree.get());
        while (!stack.empty()) {
            auto p = stack.top();
            stack.pop();
            result.push_back(p != nullptr);
            if (p) {
                stack.push(p->left.get());
                stack.push(p->right.get());
            }
        }
        return result;
    }
};
```