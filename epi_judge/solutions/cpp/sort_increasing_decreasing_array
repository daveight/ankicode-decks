```cxx
#include <vector>
using std::vector;

struct IteratorCurrentAndEnd {
    bool operator>(const IteratorCurrentAndEnd &that) const {
        return *current > *that.current;
    }

    vector<int>::const_iterator current;
    vector<int>::const_iterator end;
};

class Solution {
public:
    vector<int> sortKIncreasingDecreasingArray(const vector<int> &A) {
        // Decomposes A into a set of sorted arrays.
        vector<vector<int>> sorted_subarrays;
        typedef enum {
            kIncreasing, kDecreasing
        } SubarrayType;
        SubarrayType subarray_type = kIncreasing;
        int start_idx = 0;
        for (int i = 1; i <= A.size(); ++i) {
            if (i == A.size() ||  // A is ended. Adds the last subarray.
                (A[i - 1] < A[i] && subarray_type == kDecreasing) ||
                (A[i - 1] >= A[i] && subarray_type == kIncreasing)) {
                if (subarray_type == kIncreasing) {
                    sorted_subarrays.emplace_back(cbegin(A) + start_idx, cbegin(A) + i);
                } else {
                    sorted_subarrays.emplace_back(crbegin(A) + A.size() - i,
                                                  crbegin(A) + A.size() - start_idx);
                }
                start_idx = i;
                subarray_type = subarray_type == kIncreasing ? kDecreasing : kIncreasing;
            }
        }
    
        return mergeSortedArrays(sorted_subarrays);
    }
private:
    vector<int> mergeSortedArrays(const vector<vector<int>> &sorted_arrays) {
        priority_queue<IteratorCurrentAndEnd, vector<IteratorCurrentAndEnd>,
                greater<>>
                min_heap;

        for (const vector<int> &sorted_array : sorted_arrays) {
            if (!sorted_array.empty()) {
                min_heap.emplace(
                        IteratorCurrentAndEnd{cbegin(sorted_array), cend(sorted_array)});
            }
        }

        vector<int> result;
        while (!min_heap.empty()) {
            IteratorCurrentAndEnd smallest_array = min_heap.top();
            min_heap.pop();
            result.emplace_back(*smallest_array.current);
            if (next(smallest_array.current) != smallest_array.end) {
                min_heap.emplace(IteratorCurrentAndEnd{next(smallest_array.current),
                                                       smallest_array.end});
            }
        }
        return result;
    }
};
```