```cxx
#include <string>
#include <unordered_map>
#include <vector>
using std::string;
using std::unordered_map;
using std::vector;

class Solution {
public:
    vector<int> findAllSubstrings(const string &s, const vector<string> &words) {
        unordered_map<string, int> word_to_freq;
        for (const string &word : words) {
            ++word_to_freq[word];
        }
    
        int unit_size = words.front().size();
        vector<int> result;
        for (int i = 0; i + unit_size * words.size() <= s.size(); ++i) {
            if (matchAllWordsInDict(s, word_to_freq, i, words.size(), unit_size)) {
                result.emplace_back(i);
            }
        }
        return result;
    }
private:
    bool matchAllWordsInDict(const string &s,
                             const unordered_map<string, int> &word_to_freq,
                             int start, int num_words, int unit_size) {
        unordered_map<string, int> curr_string_to_freq;
        for (int i = 0; i < num_words; ++i) {
            string curr_word = s.substr(start + i * unit_size, unit_size);
            if (auto iter = word_to_freq.find(curr_word); iter == end(word_to_freq)) {
                return false;
            } else {
                ++curr_string_to_freq[curr_word];
                if (curr_string_to_freq[curr_word] > iter->second) {
                    // curr_word occurs too many times for a match to be possible.
                    return false;
                }
            }
        }
        return true;
    }
};
```