```cxx
using std::shared_ptr;

template<typename T>

struct ListNode {
public:
    T data;
    shared_ptr<ListNode<T>> next;
    ListNode() { }
    ListNode(T data) : data{data}, next{nullptr} { }
    ListNode(T data, shared_ptr<ListNode<T>> next) : data{data}, next{next} { }
};

class Solution {
public:
    shared_ptr<ListNode<int>> removeDuplicates(const shared_ptr<ListNode<int>> &L) {
        auto iter = L;
        while (iter) {
            auto next_distinct = iter->next;
            auto prev_distinct = iter;
            while (next_distinct && next_distinct->data == iter->data) {
                prev_distinct->next = nullptr;
                prev_distinct = next_distinct;
                next_distinct = next_distinct->next;
            }
            iter->next = next_distinct;
            iter = next_distinct;
        }
        return L;
    }
};
```