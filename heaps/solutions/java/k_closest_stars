```java
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.function.BiPredicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class Star implements Comparable<Star> {
    double x, y, z;

    public Star() { }

    public Star(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public double distance() { return Math.sqrt(x * x + y * y + z * z); }

    @Override
    public int compareTo(Star that) {
        return Double.compare(this.distance(), that.distance());
    }

    @Override
    public String toString() {
        return String.valueOf(distance());
    }
}

public class Solution {
    public List<Double> findClosestKStars(List<Star> stars, int k) {
        // maxHeap to store the closest k stars seen so far.
        PriorityQueue<Star> maxHeap =
                new PriorityQueue<>(k, Collections.reverseOrder());
        for (Star star : stars) {
            // Add each star to the max-heap. If the max-heap size exceeds k, remove
            // the maximum element from the max-heap.
            maxHeap.add(star);
            if (maxHeap.size() == k + 1) {
                maxHeap.remove();
            }
        }

        // Iteratively extract from the max-heap, which yields the stars sorted
        // according from furthest to closest.
        return Stream.generate(maxHeap::remove)
                .limit(maxHeap.size())
                .collect(Collectors.toList())
                .stream()
                .map(Star::distance)
                .collect(Collectors.toList());
    }

    public BiPredicate<List<Double>, List<Star>> comp =
            (expected, result) -> {
        if (expected.size() != result.size()) {
            return false;
        }
        Collections.sort(result);
        for (int i = 0; i < result.size(); i++) {
            if (result.get(i).distance() != expected.get(i)) {
                return false;
            }
        }
        return true;
    };
}
```