```cxx
#include <algorithm>
#include <iterator>
#include <memory>
#include <vector>

using std::make_shared;
using std::max;
using std::min;
using std::vector;

struct Item {
    int weight;
    int value;
};

class Solution {
public:
    int optimumSubjectToCapacity(const vector<Item> &items, int capacity) {
        return optimumSubjectToItemAndCapacity(
                items, items.size() - 1, capacity,
                make_shared<vector<vector<int>>>(items.size(),
                                                 vector<int>(capacity + 1, -1)).get());
    }
private:
    // Returns the optimum value when we choose from items[0, k] and have a
    // capacity of available_capacity.
    int optimumSubjectToItemAndCapacity(const vector<Item> &items, int k,
                                        int available_capacity,
                                        vector<vector<int>> *V_ptr) {
        if (k < 0) {
            // No items can be chosen.
            return 0;
        }
    
        // V[i][j] holds the optimum value when we choose from items[0, i] and have
        // a capacity of j.
        vector<vector<int>> &V = *V_ptr;
        if (V[k][available_capacity] == -1) {
            int without_curr_item = optimumSubjectToItemAndCapacity(
                    items, k - 1, available_capacity, V_ptr);
            int with_curr_item =
                    available_capacity < items[k].weight
                    ? 0
                    : items[k].value + optimumSubjectToItemAndCapacity(
                            items, k - 1,
                            available_capacity - items[k].weight, V_ptr);
            V[k][available_capacity] = max(without_curr_item, with_curr_item);
        }
        return V[k][available_capacity];
    }
};
```