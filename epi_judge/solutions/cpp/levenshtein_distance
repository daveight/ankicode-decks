```cxx
#include <algorithm>
#include <memory>
#include <string>
#include <vector>

using std::make_unique;
using std::min;
using std::string;
using std::vector;

class Solution {
public:
    int levenshteinDistance(const string &A, const string &B) {
        vector<vector<int>> distance_between_prefixes(A.size(),
        vector<int>(B.size(), -1));
        return computeDistanceBetweenPrefixes(
                A, A.size() - 1, B, B.size() - 1,
                make_unique<vector<vector<int>>>(A.size(), vector<int>(B.size(), -1))
                        .get());
    }
private:
    int computeDistanceBetweenPrefixes(
            const string &A, int A_idx, const string &B, int B_idx,
            vector<vector<int>> *distance_between_prefixes_ptr) {
        vector<vector<int>> &distance_between_prefixes =
                *distance_between_prefixes_ptr;
        if (A_idx < 0) {
            // A is empty so add all of B's characters.
            return B_idx + 1;
        } else if (B_idx < 0) {
            // B is empty so delete all of A's characters.
            return A_idx + 1;
        }
        if (distance_between_prefixes[A_idx][B_idx] == -1) {
            if (A[A_idx] == B[B_idx]) {
                distance_between_prefixes[A_idx][B_idx] = computeDistanceBetweenPrefixes(
                        A, A_idx - 1, B, B_idx - 1, distance_between_prefixes_ptr);
            } else {
                int substitute_last = computeDistanceBetweenPrefixes(
                        A, A_idx - 1, B, B_idx - 1, distance_between_prefixes_ptr);
                int add_last = computeDistanceBetweenPrefixes(
                        A, A_idx - 1, B, B_idx, distance_between_prefixes_ptr);
                int delete_last = computeDistanceBetweenPrefixes(
                        A, A_idx, B, B_idx - 1, distance_between_prefixes_ptr);
                distance_between_prefixes[A_idx][B_idx] =
                        1 + min({substitute_last, add_last, delete_last});
            }
        }
        return distance_between_prefixes[A_idx][B_idx];
    }
};
```