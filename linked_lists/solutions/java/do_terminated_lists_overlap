```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {
    public ListNode<Integer> overlappingNoCycleLists(ListNode<Integer> l0, ListNode<Integer> l1) {
        int l0Length = length(l0), l1Length = length(l1);

        // Advances the longer list to get equal length lists.
        if (l0Length > l1Length) {
            l0 = advanceListByK(l0Length - l1Length, l0);
        } else {
            l1 = advanceListByK(l1Length - l0Length, l1);
        }

        while (l0 != null && l1 != null && Integer.compare(l0.data, l1.data) != 0) {
            l0 = l0.next;
            l1 = l1.next;
        }
        return l0; // nullptr implies there is no overlap between l0 and l1.
    }

    public ListNode<Integer> advanceListByK(int k, ListNode<Integer> l) {
        while (k-- > 0) {
            l = l.next;
        }
        return l;
    }

    private int length(ListNode<Integer> l) {
        int length = 0;
        while (l != null) {
            ++length;
            l = l.next;
        }
        return length;
    }
}
```
