```java
public class Solution {

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        if (m == 0 || obstacleGrid[0].length == 0) {
            return 0;
        }
        int n = obstacleGrid[0].length;
        int[] dp = new int[n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    // 1 means obstacle, so way to reach here
                    dp[j] = 0;
                } else if (j == 0) {
                    // the cell in leftmost column
                    // if 0 way to reach cell[i-1][0],
                    // then 0 way to reach cell[i][0]
                    dp[j] = (i > 0 && dp[j] == 0) ? 0 : 1;
                } else {
                    dp[j] = dp[j - 1] + dp[j];
                }
            }
        }
        return dp[n - 1];
    }
}
```