```cxx
#include <algorithm>
#include <iterator>
#include <limits>
#include <map>
#include <vector>

using std::min;
using std::multimap;
using std::next;
using std::numeric_limits;
using std::vector;

class Solution {
public:
    int findMinDistanceSortedArrays(const vector<vector<int>> &sorted_arrays) {
        struct IterTail {
            vector<int>::const_iterator iter, tail;
        };
        int min_distance_so_far = numeric_limits<int>::max();

        // Stores two iterators in each entry. One for traversing, and the other to
        // check we reach the end.
        multimap<int, IterTail> iter_and_tail;
        for (const vector<int> &sorted_array : sorted_arrays) {
            iter_and_tail.emplace(sorted_array.front(),
                                  IterTail{cbegin(sorted_array), cend(sorted_array)});
        }
    
        while (true) {
            int min_value = cbegin(iter_and_tail)->first,
                    max_value = crbegin(iter_and_tail)->first;
            min_distance_so_far = min(max_value - min_value, min_distance_so_far);
            const auto next_min = next(cbegin(iter_and_tail)->second.iter),
                    next_end = cbegin(iter_and_tail)->second.tail;
            // Return if some array has no remaining elements.
            if (next_min == next_end) {
                return min_distance_so_far;
            }
            iter_and_tail.emplace(*next_min, IterTail{next_min, next_end});
            iter_and_tail.erase(cbegin(iter_and_tail));
        }
    }
};
```