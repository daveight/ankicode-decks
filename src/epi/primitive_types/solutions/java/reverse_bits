```java
public class Solution {
    private static long[] precomputedReverse = new long[(1 << 16)];
    static {
        for (int i = 0; i < (1 << 16); ++i) {
            precomputedReverse[i] = reverseBits(i, 15);
        }
    }

    private long reverseBits(long x, int n) {
        for (int i = 0, j = n; i < j; ++i, --j) {
            x = swapBits(x, i, j);
        }
        return x;
    }

    private long swapBits(long x, int i, int j) {
        // Extract the i-th and j-th bits, and see if they differ.
        if (((x >>> i) & 1) != ((x >>> j) & 1)) {
        // i-th and j-th bits differ. We will swap them by flipping their values.
        // Select the bits to flip with bitMask. Since x ^ 1 = 0 when x = 1 and 1
        // when x = 0, we can perform the flip XOR .
            long bitMask = (1L << i)| (1L << j);
            x ^= bitMask;
        }
        return x;
    }

    public long reverseBits(long x) {
        final int MASK_SIZE = 16;
        final int BIT_MASK = 0xFFFF;
        return precomputedReverse[(int)(x & BIT_MASK)] << (3 * MASK_SIZE) |
                precomputedReverse[(int)((x >>> MASK_SIZE) & BIT_MASK)]
                        << (2 * MASK_SIZE) |
                precomputedReverse[(int)((x >>> (2 * MASK_SIZE)) & BIT_MASK)]
                        << MASK_SIZE |
                precomputedReverse[(int)((x >>> (3 * MASK_SIZE)) & BIT_MASK)];
    }
}
```