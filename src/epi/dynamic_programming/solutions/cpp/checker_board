```cpp
#include <algorithm>
#include <climits>

class Solution {
private:
    int** q;
    int** p;
    int n;

    void compute_shortest_path_arrays(vector<vector<int>>& costs) {
        n = costs[0].size();
        q = new int*[n + 2];
        p = new int*[n + 2];
        for (int i = 0; i < n + 2; i++) {
            q[i] = new int[n + 2];
            p[i] = new int[n + 2];
        }

        for (int x = 1; x <= n; x++) {
            q[1][x] = costs[0][x - 1];
        }

        for (int y = 1; y <= n; y++) {
            q[y][0] = INT_MAX;
            q[y][n + 1] = INT_MAX;
        }
        for (int y = 2; y <= n; y++) {
            for (int x = 1; x <= n; x++) {
                int m = min(min(q[y - 1][x - 1], q[y - 1][x]), q[y - 1][x + 1]);
                q[y][x] = m + costs[y - 1][x - 1];
                if (m == q[y - 1][x - 1]) {
                    p[y][x] = -1;
                } else if (m == q[y - 1][x]) {
                    p[y][x] = 0;
                } else {
                    p[y][x] = 1;
                }
            }
        }
    }

    void get_path(int y, int x, vector<int>& path) {
        path.push_back(x);
        if (y == 2) {
            path.push_back(x + p[y][x]);
        } else {
            get_path(y - 1, x + p[y][x], path);
        }
    }

public:
    vector<int> checker_board_min_path(vector<vector<int>> costs) {
        compute_shortest_path_arrays(costs);
        int minIndex = 1;
        int min = q[n][1];
        for (int i = 2; i <= n; i++) {
            if (q[n][i] < min) {
                minIndex = i;
                min = q[n][i];
            }
        }
        vector<int> path;
        get_path(n, minIndex, path);

        return path;
    }
};
```