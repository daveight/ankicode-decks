```cxx
#include <algorithm>
#include <functional>
#include <iterator>
#include <limits>
#include <numeric>
#include <vector>

using std::max;
using std::multiplies;
using std::numeric_limits;
using std::vector;

class Solution {
public:
    int findBiggestProductNMinusOneProduct(const vector<int> &A) {
        // Builds suffix products.
        vector<int> suffix_products(A.size());
        partial_sum(crbegin(A), crend(A), rbegin(suffix_products), multiplies<int>());
    
        // Finds the biggest product of (n - 1) numbers.
        int prefix_product = 1, max_product = numeric_limits<int>::min();
        for (int i = 0; i < A.size(); ++i) {
            int suffix_product = i + 1 < A.size() ? suffix_products[i + 1] : 1;
            max_product = max(max_product, prefix_product * suffix_product);
            prefix_product *= A[i];
        }
        return max_product;
    }
};
```