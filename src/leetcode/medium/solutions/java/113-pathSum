```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public List<List<Integer>> pathSum(BinaryTreeNode<Integer> root, int sum) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        int target = sum;
        List<Integer> path = new ArrayList<>();
        pathSum(root, target, path, result);
        return result;
    }

    private void pathSum(BinaryTreeNode<Integer> root, int target, List<Integer> path,
            List<List<Integer>> result) {
        // base case
        if (root == null) {
            return;
        }
        path.add(root.data);
        if (root.left == null && root.right == null && root.data == target) {
            // base case
            // ! don't use result.add(path) because this will only add a
            // reference;
            result.add(new ArrayList<>(path));
        } else {
            // recursive case
            pathSum(root.left, target - root.data, path, result);
            pathSum(root.right, target - root.data, path, result);
        }
        path.remove(path.size() - 1);
    }
}
```