"Longest common substring"	"Find the longest string that is a substring of two or more strings

Example:
""ABABC"", ""VABCA"" - longest common substring is string ""ABC"" of length 3"	"lc_substr"	"### Longest common substring
[Wiki](https://en.wikipedia.org/wiki/Longest_common_substring_problem#Dynamic_programming)

- Time Complexity: O(n * r).
- Auxiliary Space: O(n * r).

### Java
```java
public class Solution {
    public String lcSubstr(String s, String t) {
        int r = s.length();
        int n = t.length();

        int z = 0;
        int w = -1;
        int[][] l = new int[r][n];

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < n; j++) {
                if (s.charAt(i) == t.charAt(j)) {
                    if (i == 0 || j == 0) {
                        l[i][j] = 1;
                    } else {
                        l[i][j] = l[i - 1][j - 1] + 1;
                    }
                    if (l[i][j] > z) {
                        z = l[i][j];
                        w = i;
                    }
                }
            }
        }

        return s.substring(w - z + 1, w + 1);
    }
}
```
### C++
```cpp
class Solution {
public:
    string lc_substr(string s, string t) {
        int r = s.size();
        int n = t.size();

        int z = 0;
        int w = -1;
        int l[r][n];

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < n; j++) {
                l[i][j] = 0;
            }
        }

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < n; j++) {
                if (s.at(i) == t.at(j)) {
                    if (i == 0 || j == 0) {
                        l[i][j] = 1;
                    } else {
                        l[i][j] = l[i - 1][j - 1] + 1;
                    }
                    if (l[i][j] > z) {
                        z = l[i][j];
                        w = i;
                    }
                }
            }
        }

        return s.substr(w - z + 1, z);
    }
};
```
### JavaScript
```js
function lc_substr(s, t) {
    const r = s.length
    const n = t.length

    let z = 0
    let w = -1
    const l = []

    for (let i = 0; i < r; i++) {
        l[i] = []
        for (let j = 0; j < n; j++) {
            l[i][j] = 0
        }
    }

    for (let i = 0; i < r; i++) {
        for (let j = 0; j < n; j++) {
            if (s[i] === t[j]) {
                if (i === 0 || j === 0) {
                    l[i][j] = 1
                } else {
                    l[i][j] = l[i - 1][j - 1] + 1
                }
                if (l[i][j] > z) {
                    z = l[i][j]
                    w = i
                }
            }
        }
    }

    return s.substring(w - z + 1, w + 1)
}
```
### Python
```python
def lc_substr(s, t):
    r = len(s)
    n = len(t)

    z = 0
    w = -1
    l = []

    l = [[0 for i in range(n)] for j in range(r)]

    for i in range(0, r):
        for j in range(0, n):
            if s[i] == t[j]:
                if i == 0 or j == 0:
                    l[i][j] = 1
                else:
                    l[i][j] = l[i - 1][j - 1] + 1

                if l[i][j] > z:
                    z = l[i][j]
                    w = i

    return s[w - z + 1:w + 1]
```"	"string[s];string[t];string
""ABCAB"";""BABCB"";""ABC""
""123124123r423rHelloworld24352343412"";""asd1234d141243Helloworld1413rsfvsdfdsf"";""Helloworld""
""evheklghh;hj;123456kdsfvjndfkvnjkfnv3423"";""dgbkdjbgne.kgerwkg.ejr123456"";""123456""
""123456;hj;123456kdsfvjndfkvnjkfnv3423"";""dgbkdjbgne.kgerwkg.ejr123456"";""123456"""
"Least String Rotation"	"Given a string find a rotation of such string with the lowest lexicographical order.

Example:
Minimal rotation of ""bbaaccaadd"" will be ""aaccaaddbb"""	"least_rotation"	"### Least String Rotation
[Wiki: Booth's Algorithm](https://en.wikipedia.org/wiki/Lexicographically_minimal_string_rotation#Booth's_Algorithm)

- Time Complexity: O(n).
- Worst Case Time Complexity: O(3 * n).
- Auxiliary Space: O(n).

### Java
```java
public class Solution {
    public String leastRotation(String s) {
        String o = s;
        s += s;

        int[] f = new int[s.length()];
        for (int i = 0; i < f.length; i++) {
            f[i] = -1;
        }

        int k = 0;

        for (int j = 1; j < s.length(); j++) {
            char sj = s.charAt(j);
            int i = f[j - k - 1];
            while (i != -1 && sj != s.charAt(k + i + 1)) {
                if (sj < s.charAt(k + i + 1)) {
                    k = j - i - 1;
                }
                i = f[i];
            }
            if (sj != s.charAt(k + i + 1)) {
                if (sj < s.charAt(k)) {
                    k = j;
                }
                f[j - k] = -1;
            } else {
                f[j - k] = i + 1;
            }
        }

        return o.substring(k) + o.substring(0, k);
    }
}
```
### C++
```cpp
class Solution {
public:
    string least_rotation(string s) {
        string o = s;
        s += s;

        int n = s.size();
        int f[n];
        for (int i = 0; i < n; i++) {
            f[i] = -1;
        }

        int k = 0;

        for (int j = 1; j < s.size(); j++) {
            char sj = s.at(j);
            int i = f[j - k - 1];
            while (i != -1 && sj != s.at(k + i + 1)) {
                if (sj < s.at(k + i + 1)) {
                    k = j - i - 1;
                }
                i = f[i];
            }
            if (sj != s.at(k + i + 1)) {
                if (sj < s.at(k)) {
                    k = j;
                }
                f[j - k] = -1;
            } else {
                f[j - k] = i + 1;
            }
        }

        return o.substr(k, o.size() - k) + o.substr(0, k);
    }
};
```
### JavaScript
```js
function least_rotation(s) {
    const o = s
    s += s

    const n = s.length
    const f = []
    for (let i = 0; i < n; i++) {
        f[i] = -1
    }

    let k = 0

    for (let j = 1; j < s.length; j++) {
        const sj = s.charAt(j)
        let i = f[j - k - 1]
        while (i != -1 && sj != s.charAt(k + i + 1)) {
            if (sj < s.charAt(k + i + 1)) {
                k = j - i - 1
            }
            i = f[i]
        }
        if (sj != s.charAt(k + i + 1)) {
            if (sj < s.charAt(k)) {
                k = j
            }
            f[j - k] = -1
        } else {
            f[j - k] = i + 1
        }
    }

    return o.substring(k) + o.substring(0, k)
}
```
### Python
```python
def least_rotation(s):
    o = s
    s += s

    n = len(s)
    f = [-1 for i in range(0, n)]
    k = 0

    for j in range(1, n):
        sj = s[j]
        i = f[j - k - 1]
        while i != -1 and sj != s[k + i + 1]:
            if sj < s[k + i + 1]:
                k = j - i - 1
            i = f[i]
        if sj != s[k + i + 1]:
            if sj < s[k]:
                k = j
            f[j - k] = -1
        else:
            f[j - k] = i + 1

    return o[k:] + o[0:k]
```"	"string[s];string
""GEEKSFORGEEKS"";""EEKSFORGEEKSG""
""GEEKSQUIZ"";""EEKSQUIZG""
""BCABDADAB"";""ABBCABDAD""
""bbaaccaadd"";""aaccaaddbb"""
"Search pattern in a string"	"Given two strings a pattern s and a text t, determine if the pattern appears in the text in O(|r| + |n|) time."	"search_pattern"	"### Rabin-Karp Algorithm
[Wiki](https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm)

- Agerage Time Complexity: O(|s| + |p|).
- Worst Case Time Complexity: O(|p| * |s|).
- Auxiliary Space: O(1).
### Java
```java
public class Solution {
    public int searchPattern(String s, String p) {
        long prime = 2051758399L;
        int radix = 256;
        long h = 1L;
        int n = s.length();
        int m = p.length();
        if (n < m) {
            return -1;
        }

        long pHash = 0L;
        long sHash = 0L;

        for (int i = 0; i < m - 1; i++) {
            h = (h * radix) % prime;
        }

        for (int i = 0; i < m; i++) {
            pHash = (pHash * radix + p.charAt(i)) % prime;
            sHash = (sHash * radix + s.charAt(i)) % prime;
        }

        for (int i = 0; i <= n - m; i++) {
            if (pHash == sHash) {
                int j;
                for (j = 0; j < m; j++) {
                    if (s.charAt(i + j) != p.charAt(j)) {
                        break;
                    }
                }
                if (j == m) {
                    return i;
                }
            }
            if (i < n - m) {
                sHash = (radix * (sHash - s.charAt(i) * h) + s.charAt(i + m)) % prime;
                if (sHash < 0) {
                    sHash += prime;
                }
            }
        }

        return -1;
    }
}
```
### C++
```cpp
class Solution {
public:
    int search_pattern(string s, string p) {
        long int prime = 2051758399;
        int radix = 256;
        long int h = 1;
        int n = s.size();
        int m = p.size();
        if (n < m) {
            return -1;
        }

        long int pHash = 0;
        long int sHash = 0;

        for (int i = 0; i < m - 1; i++) {
            h = (h * radix) % prime;
        }

        for (int i = 0; i < m; i++) {
            pHash = (pHash * radix + p.at(i)) % prime;
            sHash = (sHash * radix + s.at(i)) % prime;
        }

        for (int i = 0; i <= n - m; i++) {
            if (pHash == sHash) {
                int j;
                for (j = 0; j < m; j++) {
                    if (s.at(i + j) != p.at(j)) {
                        break;
                    }
                }
                if (j == m) {
                    return i;
                }
            }
            if (i < n - m) {
                sHash = (radix * (sHash - s.at(i) * h) + s.at(i + m)) % prime;
                if (sHash < 0) {
                    sHash += prime;
                }
            }
        }

        return -1;
    }
};
```
### JavaScript
```js
function search_pattern(s, p) {
    const prime = 2051758399
    const radix = 256
    let h = 1
    const n = s.length
    const m = p.length
    if (n < m) {
        return -1
    }

    let pHash = 0
    let sHash = 0

    for (let i = 0; i < m - 1; i++) {
        h = (h * radix) % prime
    }

    for (let i = 0; i < m; i++) {
        pHash = (pHash * radix + p.charCodeAt(i)) % prime
        sHash = (sHash * radix + s.charCodeAt(i)) % prime
    }

    for (let i = 0; i <= n - m; i++) {
        if (pHash == sHash) {
            let j
            for (j = 0; j < m; j++) {
                if (s.charAt(i + j) != p.charAt(j)) {
                    break
                }
            }
            if (j == m) {
                return i
            }
        }
        if (i < n - m) {
            sHash = (radix * (sHash - s.charCodeAt(i) * h) + s.charCodeAt(i + m)) % prime
            if (sHash < 0) {
                sHash += prime
            }
        }
    }

    return -1
}
```
### Python
```python
def search_pattern(s, p):
    prime = 2051758399
    radix = 256
    h = 1
    n = len(s)
    m = len(p)
    if n < m:
        return -1

    pHash = 0
    sHash = 0

    for i in range(0, m - 1):
        h = (h * radix) % prime

    for i in range(0, m):
        pHash = (pHash * radix + ord(p[i])) % prime
        sHash = (sHash * radix + ord(s[i])) % prime

    for i in range(0, n - m + 1):
        if pHash == sHash:
            j = 0
            for j in range(0, m):
                if s[i + j] != p[j]:
                    break
            if j == m - 1:
                return i
        if i < n - m:
            sHash = (radix * (sHash - ord(s[i]) * h) + ord(s[i + m])) % prime
            if sHash < 0:
                sHash += prime

    return -1
```"	"string[s];string[t];int
""hello world"";""orl"";7
""abcdefgh"";""bcd"";1
""abcdefgh"";""zk"";-1
""a"";""ab"";-1
"
