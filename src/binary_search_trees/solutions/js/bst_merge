```js
class BinaryTreeNode {
    constructor(data, left = null, right = null) {
        this.data = data
        this.left = left
        this.right = right
    }
}

let head

function mergeTwoSortedLinkedLists(A, B) {
    const dummyHead = new BinaryTreeNode()
    let current = dummyHead
    let p1 = A
    let p2 = B

    while (p1 != null && p2 != null) {
        if (p1.data < p2.data) {
            current.right = p1
            p1 = p1.right
        } else {
            current.right = p2
            p2 = p2.right
        }
        current = current.right
    }

    if (p1 != null) {
        current.right = p1
    }
    if (p2 != null) {
        current.right = p2
    }
    return dummyHead.right
}

// Count the list length till end.
function countLength(L) {
    let length = 0
    while (L != null) {
        ++length
        L = L.right
    }
    return length
}

function bstToDoublyLinkedList(n) {
    // Empty subtree.
    if (n == null) {
        return null
    }

    // Recursively build the list from left and right subtrees.
    let lHead = bstToDoublyLinkedList(n.left)
    let rHead = bstToDoublyLinkedList(n.right)

    // Append n to the list from left subtree.
    let lTail = null
    if (lHead != null) {
        lTail = lHead.left
        lTail.right = n
        n.left = lTail
        lTail = n
    } else {
        lHead = lTail = n
    }

    // Append the list from right subtree to n.
    let rTail = null
    if (rHead != null) {
        rTail = rHead.left
        lTail.right = rHead
        rHead.left = lTail
    } else {
        rTail = lTail
    }
    rTail.right = lHead
    lHead.left = rTail

    return lHead
}

function buildSortedDoublyLinkedList(L, n) {
    head = L
    return buildSortedDoublyLinkedListHelper(0, n)
}

function buildSortedDoublyLinkedListHelper(s, e) {
    if (s >= e) {
        return null
    }

    let m = s + Math.floor((e - s) / 2)
    let left = buildSortedDoublyLinkedListHelper(s, m)
    let curr = new BinaryTreeNode()
    curr.data = head.data
    head = head.right
    curr.left = left
    curr.right = buildSortedDoublyLinkedListHelper(m + 1, e)
    return curr
}

function mergeTwoBSTs(A, B){
    A = bstToDoublyLinkedList(A)
    B = bstToDoublyLinkedList(B)
    A.left.right = null
    B.left.right = null
    A.left = null
    B.left = null

    let ALength = countLength(A)
    let BLength = countLength(B)

    return buildSortedDoublyLinkedList(mergeTwoSortedLinkedLists(A, B),
            ALength + BLength)
}