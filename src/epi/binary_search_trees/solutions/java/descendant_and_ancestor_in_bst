```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public boolean pairIncludesAncestorAndDescendantOfM(BinaryTreeNode<Integer> tree,
                                                        int possibleAncOrDesc0,
                                                        int possibleAncOrDesc1,
                                                        int middle) {
        final BinaryTreeNode<Integer> candidate0 = findNode(tree, possibleAncOrDesc0);
        final BinaryTreeNode<Integer> candidate1 = findNode(tree, possibleAncOrDesc1);
        final BinaryTreeNode<Integer> middleNode = findNode(tree, middle);

        BinaryTreeNode<Integer> search0 = candidate0, search1 = candidate1;

        // Perform interleaved searching from possibleAncOrDesc0 and
        // possibleAncOrDesc1 for middle.
        while (search0 != candidate1 && search0 != middleNode &&
               search1 != candidate0 && search1 != middleNode &&
               (search0 != null || search1 != null)) {
            if (search0 != null) {
                search0 = search0.data > middleNode.data ? search0.left : search0.right;
            }
            if (search1 != null) {
                search1 = search1.data > middleNode.data ? search1.left : search1.right;
            }
        }

        // If both searches were unsuccessful, or we got from possibleAncOrDesc0
        // to possibleAncOrDesc1 without seeing middle, or from possibleAncOrDesc1
        // to possibleAncOrDesc0 without seeing middle, middle cannot lie between
        // possibleAncOrDesc0 and possibleAncOrDesc1.
        if (search0 == candidate1 || search1 == candidate0 ||
           (search0 != middleNode && search1 != middleNode)) {
            return false;
        }

        // If we get here, we already know one of possibleAncOrDesc0 or
        // possibleAncOrDesc1 has a path to middle. Check if middle has a path to
        // possibleAncOrDesc1 or to possibleAncOrDesc0.
        return search0 == middleNode ? searchTarget(middleNode, candidate1) : searchTarget(middleNode, candidate0);
    }

    private boolean searchTarget(BinaryTreeNode<Integer> from, BinaryTreeNode<Integer> target) {
        while (from != null && from != target) {
            from = from.data > target.data ? from.left : from.right;
        }
        return from == target;
    }

    private BinaryTreeNode<Integer> findNode(BinaryTreeNode<Integer> node, Integer val) {
        if (node != null) {
            if (val.equals(node.data)) {
                return node;
            }

            BinaryTreeNode<Integer> leftResult = findNode(node.left, val);
            if (leftResult != null) {
                return leftResult;
            }

            BinaryTreeNode<Integer> rightResult = findNode(node.right, val);
            if (rightResult != null) {
                return rightResult;
            }
        }

        return null;
    }
}
```