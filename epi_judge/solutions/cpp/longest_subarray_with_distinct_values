```cxx
#include <algorithm>
#include <unordered_map>
#include <vector>
using std::max;
using std::unordered_map;
using std::vector;

class Solution {
public:
    int longestSubarrayWithDistinctEntries(const vector<int> &A) {
        // Records the most recent occurrences of each entry.
        unordered_map<int, size_t> most_recent_occurrence;
        size_t longest_dup_free_subarray_start_idx = 0, result = 0;
        for (size_t i = 0; i < A.size(); ++i) {
            const auto&[inserted_entry, inserted_happen] =
            most_recent_occurrence.emplace(A[i], i);
            // Defer updating dup_idx until we see a duplicate.
            if (!inserted_happen) {
                // A[i] appeared before. Did it appear in the longest current subarray?
                if (inserted_entry->second >= longest_dup_free_subarray_start_idx) {
                    result = max(result, i - longest_dup_free_subarray_start_idx);
                    longest_dup_free_subarray_start_idx = inserted_entry->second + 1;
                }
                inserted_entry->second = i;
            }
        }
        return max(result, A.size() - longest_dup_free_subarray_start_idx);
    }
};
```