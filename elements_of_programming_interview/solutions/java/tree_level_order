```java
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public List<List<Integer>>
    binaryTreeDepthOrder(BinaryTreeNode<Integer> tree) {
        List<List<Integer>> result = new ArrayList<>();
        if (tree == null) {
            return result;
        }

        List<BinaryTreeNode<Integer>> currDepthNodes = List.of(tree);
        while (!currDepthNodes.isEmpty()) {
            result.add(currDepthNodes.stream()
                 .map(curr -> curr.data)
                 .collect(Collectors.toList()));
            currDepthNodes = currDepthNodes.stream()
                 .map(curr -> Arrays.asList(curr.left, curr.right))
                 .flatMap(List::stream)
                 .filter(child -> child != null)
                 .collect(Collectors.toList());
        }
        return result;
    }
}
```