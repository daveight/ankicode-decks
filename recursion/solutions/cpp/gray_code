```cxx
class Solution {
public:
    vector<int> grayCode(int num_bits) {
        if (num_bits == 0) {
            return {0};
        }

        // These implicitly begin with 0 at bit-index (num_bits - 1).
        vector<int> gray_code_num_bits_minus_1 = grayCode(num_bits - 1);

        // Now, add a 1 at bit-index (num_bits - 1) to all entries in
        // grayCodeNumBitsMinus1.
        int leading_bit_one = 1 << (num_bits - 1);
        // Process in reverse order to achieve reflection of
        // gray_code_num_bits_minus_1.
        for (int i = gray_code_num_bits_minus_1.size() - 1; i >= 0; --i) {
            gray_code_num_bits_minus_1.emplace_back(leading_bit_one | gray_code_num_bits_minus_1[i]);
        }
        return gray_code_num_bits_minus_1;
    }
};
```