```java
import java.util.List;

public class Solution {
    // Represent subarray by starting and ending indices, inclusive.
    private class Subarray {
        public Integer start;
        public Integer end;

        public Subarray(Integer start, Integer end) {
            this.start = start;
            this.end = end;
        }
    }

    public int findLongestIncreasingSubarray(List<Integer> A) {
        int maxLength = 1;
        Subarray result = new Subarray(0, 0);
        int i = 0;
        while (i < A.size() - maxLength) {
            // Backward check and skip if A[j - 1] >= A[j].
            boolean isSkippable = false;
            for (int j = i + maxLength; j > i; --j) {
                if (A.get(j - 1) >= A.get(j)) {
                    i = j;
                    isSkippable = true;
                    break;
                }
            }

            // Forward check if it is not skippable.
            if (!isSkippable) {
                i += maxLength;
                while (i < A.size() && A.get(i - 1) < A.get(i)) {
                    ++i;
                    ++maxLength;
                }
                result = new Subarray(i - maxLength, i - 1);
            }
        }
        return result.end - result.start + 1;
    }
}
```