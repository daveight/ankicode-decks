```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
    private enum SubarrayType { INCREASING, DECREASING }

    private static class ArrayEntry {
        public Integer value;
        public Integer arrayId;

        public ArrayEntry(Integer value, Integer arrayId) {
            this.value = value;
            this.arrayId = arrayId;
        }
    }

    public List<Integer> sortKIncreasingDecreasingArray(List<Integer> A) {
        // Decomposes A into a set of sorted arrays.
        List<List<Integer>> sortedSubarrays = new ArrayList<>();
        SubarrayType subarrayType = SubarrayType.INCREASING;
        int startIdx = 0;
        for (int i = 1; i <= A.size(); ++i) {
            if (i == A.size() // A is ended. Adds the last subarray
                || (A.get(i - 1) < A.get(i)
                && subarrayType == SubarrayType.DECREASING)
                || (A.get(i - 1) >= A.get(i) && subarrayType == SubarrayType.INCREASING)) {
                List<Integer> subList = A.subList(startIdx, i);
                if (subarrayType == SubarrayType.DECREASING) {
                    Collections.reverse(subList);
                }
                sortedSubarrays.add(subList);
                startIdx = i;
                subarrayType = (subarrayType == SubarrayType.INCREASING ? SubarrayType.DECREASING
                                                                        : SubarrayType.INCREASING);
            }
        }
        return mergeSortedArrays(sortedSubarrays);
    }

    private List<Integer> mergeSortedArrays(List<List<Integer>> sortedArrays) {
        List<Iterator<Integer>> iters = new ArrayList<>(sortedArrays.size());
        for (List<Integer> array : sortedArrays) {
            iters.add(array.iterator());
        }
        PriorityQueue<ArrayEntry> minHeap = new PriorityQueue<>(sortedArrays.size(),
            (o1, o2) -> Integer.compare(o1.value, o2.value));
        for (int i = 0; i < iters.size(); ++i) {
            if (iters.get(i).hasNext()) {
                minHeap.add(new ArrayEntry(iters.get(i).next(), i));
            }
        }

        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            ArrayEntry headEntry = minHeap.poll();
            result.add(headEntry.value);
            if (iters.get(headEntry.arrayId).hasNext()) {
                minHeap.add(new ArrayEntry(iters.get(headEntry.arrayId).next(), headEntry.arrayId));
            }
        }
        return result;
    }
}
```