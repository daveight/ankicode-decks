```cxx
#include <queue>
#include <vector>

using std::vector;
using std::deque;
using std::length_error;
using std::queue;

struct TrafficElement {
    // Following operators are needed for QueueWithMax with maximum.
    bool operator<(const TrafficElement &that) const {
        return volume < that.volume || (volume == that.volume && time < that.time);
    }

    bool operator==(const TrafficElement &that) const {
        return time == that.time && volume == that.volume;
    }

    bool operator<=(const TrafficElement &that) const { return !(that < *this); }

    int time;
    double volume;
};

template<typename T>
class QueueWithMax {
public:
    void Enqueue(const T &x) {
        entries_.emplace(x);
        // Eliminate dominated elements in candidates_for_max_.
        while (!candidates_for_max_.empty() && candidates_for_max_.back() < x) {
            candidates_for_max_.pop_back();
        }
        candidates_for_max_.emplace_back(x);
    }

    T Dequeue() {
        if (!entries_.empty()) {
            T result = entries_.front();
            if (result == candidates_for_max_.front()) {
                candidates_for_max_.pop_front();
            }
            entries_.pop();
            return result;
        }
        throw length_error("empty queue");
    }

    const T &Max() const {
        if (!candidates_for_max_.empty()) {
            return candidates_for_max_.front();
        }
        throw length_error("empty queue");
    }

    T &Head() { return entries_.front(); }

    const T &Head() const { return entries_.front(); }

private:
    queue<T> entries_;
    deque<T> candidates_for_max_;
};

class Solution {
public:
    vector<TrafficElement> computeTrafficVolumes(const vector<TrafficElement> &A, int w) {
        QueueWithMax<TrafficElement> sliding_window;
        vector<TrafficElement> maximum_volumes;
        for (const TrafficElement &traffic_info : A) {
            sliding_window.Enqueue(traffic_info);
            while (traffic_info.time - sliding_window.Head().time > w) {
                sliding_window.Dequeue();
            }
            maximum_volumes.emplace_back(
                    TrafficElement{traffic_info.time, sliding_window.Max().volume});
        }
        return maximum_volumes;
    }
};
```