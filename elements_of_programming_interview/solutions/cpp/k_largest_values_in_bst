```cxx
#include <memory>
#include <vector>

using std::shared_ptr;
using std::vector;

template <typename T>

struct BinaryTreeNode {
    T data;
    shared_ptr<BinaryTreeNode<T>> left;
    shared_ptr<BinaryTreeNode<T>> right;
    BinaryTreeNode() { }
    BinaryTreeNode(T data, shared_ptr<BinaryTreeNode<T>> left, shared_ptr<BinaryTreeNode<T>> right) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
};

class Solution {
public:
    vector<int> findKLargestInBst(const shared_ptr<BinaryTreeNode<int>> &tree, int k) {
        vector<int> k_largest_elements;
        findKLargestInBstHelper(tree, k, &k_largest_elements);
        return k_largest_elements;
    }

private:
    void findKLargestInBstHelper(const shared_ptr<BinaryTreeNode<int>> &tree, int k,
                                 vector<int> *k_largest_elements) {
        // Perform reverse inorder traversal.
        if (tree && k_largest_elements->size() < k) {
            findKLargestInBstHelper(tree->right, k, k_largest_elements);
            if (k_largest_elements->size() < k) {
                k_largest_elements->emplace_back(tree->data);
                findKLargestInBstHelper(tree->left, k, k_largest_elements);
            }
        }
    }
};
```