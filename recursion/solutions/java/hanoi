```java
public class Solution {
    private static final int NUM_PEGS = 3;

    public List<List<Integer>> computeTowerHanoi(int numRings) {
        List<Deque<Integer>> pegs = IntStream.range(0, NUM_PEGS)
                .mapToObj(i -> new ArrayDeque<Integer>())
                .collect(Collectors.toList());
        // Initialize pegs.
        for (int i = numRings; i >= 1; --i) {
            pegs.get(0).addFirst(i);
        }
        List<List<Integer>> result = new ArrayList<>();
        computeTowerHanoiSteps(numRings, pegs, 0, 1, 2, result);
        return result;
    }

    private void computeTowerHanoiSteps(int numRingsToMove,
                                        List<Deque<Integer>> pegs,
                                        int fromPeg, int toPeg, int usePeg,
                                        List<List<Integer>> result) {
        if (numRingsToMove > 0) {
            computeTowerHanoiSteps(numRingsToMove - 1, pegs, fromPeg, usePeg, toPeg,
                    result);
            pegs.get(toPeg).addFirst(pegs.get(fromPeg).removeFirst());
            result.add(List.of(fromPeg, toPeg));
            computeTowerHanoiSteps(numRingsToMove - 1, pegs, usePeg, toPeg, fromPeg,
                    result);
        }
    }
}
```
