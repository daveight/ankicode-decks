```java
import java.util.Arrays;
import java.util.List;

class Item {
    int weight;
    int value;
}

public class Solution {
    public int optimumSubjectToCapacity(List<Item> items, int capacity) {
        // V[i][j] holds the optimum value when we choose from
        // items.subList(0, i + 1) and have a capacity of j.
        int[][] V = new int[items.size()][capacity + 1];
        for (int[] v : V) {
            Arrays.fill(v, -1);
        }
        return optimumSubjectToItemAndCapacity(items, items.size() - 1, capacity, V);
    }

    // Returns the optimum value when we choose from items.subList(0, k + 1) and
    // have a capacity of availableCapacity.
    private int optimumSubjectToItemAndCapacity(List<Item> items, int k, int availableCapacity, int[][] V) {
        if (k < 0) {
            // No items can be chosen.
            return 0;
        }

        if (V[k][availableCapacity] == -1) {
            int withoutCurrItem =
                    optimumSubjectToItemAndCapacity(items, k - 1, availableCapacity, V);
            int withCurrItem =
                    availableCapacity < items.get(k).weight
                            ? 0
                            : items.get(k).value +
                                        optimumSubjectToItemAndCapacity(
                                                items, k - 1, availableCapacity - items.get(k).weight, V);
            V[k][availableCapacity] = Math.max(withoutCurrItem, withCurrItem);
        }
        return V[k][availableCapacity];
    }
}
```