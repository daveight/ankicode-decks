```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public int sumRootToLeaf(BinaryTreeNode<Integer> tree) {
        return sumRootToLeafHelper(tree, 0);
    }

    private int sumRootToLeafHelper(BinaryTreeNode<Integer> tree, int partialPathSum) {
        if (tree == null) {
            return 0;
        }

        partialPathSum = partialPathSum * 2 + tree.data;
        if (tree.left == null && tree.right == null) { // Leaf.
            return partialPathSum;
        }
        // Non-leaf.
        return sumRootToLeafHelper(tree.left, partialPathSum) +
                sumRootToLeafHelper(tree.right, partialPathSum);
    }
}
```