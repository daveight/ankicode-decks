```cxx
template <typename T>

struct BinaryTreeNode {
    T data;
    shared_ptr<BinaryTreeNode<T>> left;
    shared_ptr<BinaryTreeNode<T>> right;

    BinaryTreeNode() { }

    BinaryTreeNode(T data, shared_ptr<BinaryTreeNode<T>> left, shared_ptr<BinaryTreeNode<T>> right) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
};


class Solution {
public:
    int buildMinHeightBSTFromSortedArray(vector<int> A) {
        return findHeight(buildMinHeightBSTFromSortedArrayHelper(A, 0, A.size()));
    }

private:
    shared_ptr<BinaryTreeNode<int>> buildMinHeightBSTFromSortedArrayHelper(vector<int> A, int start, int end) {
        if (start >= end) {
            return nullptr;
        }
        int mid = start + ((end - start) / 2);
        return make_shared<BinaryTreeNode<int>>(A[mid],
                                    buildMinHeightBSTFromSortedArrayHelper(A, start, mid),
                                    buildMinHeightBSTFromSortedArrayHelper(A, start + 1, mid));
    }

    int findHeight(shared_ptr<BinaryTreeNode<int>> node) {
        if (node == nullptr) {
            return -1;
        }

        int lheight = findHeight(node->left);
        int rheight = findHeight(node->right);

        if (lheight > rheight) {
            return lheight + 1;
        } else {
            return rheight + 1;
        }
    }
};
```