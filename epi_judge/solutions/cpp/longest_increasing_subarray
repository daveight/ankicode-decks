```cxx
#include <vector>

using std::vector;

class Solution {
public:
    struct Subarray {
        int start = 0, end = 0;
    };
    
    int findLongestIncreasingSubarray(const vector<int> &A) {
        int max_length = 1;
        Subarray result;
        int i = 0;
        while (i < A.size() - max_length) {
            // Backward check and skip if A[j - 1] >= A[j].
            bool is_skippable = false;
            for (int j = i + max_length; j > i; --j) {
                if (A[j - 1] >= A[j]) {
                    i = j;
                    is_skippable = true;
                    break;
                }
            }

            // Forward check if it is not skippable.
            if (!is_skippable) {
                i += max_length;
                while (i < A.size() && A[i - 1] < A[i]) {
                    ++i, ++max_length;
                }
                result = {i - max_length, i - 1};
            }
        }
        return result.end - result.start + 1;
    }
};
```