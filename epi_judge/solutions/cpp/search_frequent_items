```cxx
#include <algorithm>
#include <iterator>
#include <string>
#include <unordered_map>
#include <vector>
using std::for_each;
using std::string;
using std::unordered_map;
using std::vector;

class Solution {
public:
    // Finds the candidates which may occur > n / k times.
    vector<string> searchFrequentItems(int k, vector<string> stream) {
        vector<string>::const_iterator stream_begin = cbegin(stream);
        const vector<string>::const_iterator stream_end = cend(stream);
        vector<string>::const_iterator stream_begin_copy = stream_begin;
        unordered_map<string, int> table;
        int n = 0;  // Count the number of strings.
    
        while (stream_begin != stream_end) {
            ++table[*stream_begin++], ++n;
            // Detecting k items in table, at least one of them must have exactly
            // one in it. We will discard those k items by one for each.
            if (table.size() == k) {
                auto it = begin(table);
                while (it != end(table)) {
                    if (--(it->second) == 0) {
                        table.erase(it++);
                    } else {
                        ++it;
                    }
                }
            }
        }
    
        // Resets table for the following counting.
        for_each(begin(table), end(table), [](auto &it) { it.second = 0; });
    
        // Resets the stream and read it again.
        stream_begin = stream_begin_copy;
        // Counts the occurrence of each candidate word.
        while (stream_begin != stream_end) {
            if (auto it = table.find(*stream_begin++); it != end(table)) {
                ++it->second;
            }
        }
    
        // Selects the word which occurs > n / k times.
        vector<string> result;
        for_each(begin(table), end(table), [&](const auto &it) {
            if (it.second > static_cast<double>(n) / k) {
                result.emplace_back(it.first);
            }
        });
        return result;
    }
};
```