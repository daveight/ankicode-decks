```cxx
template<typename T>

struct ListNode {
public:
    T data;
    shared_ptr<ListNode<T>> next;
    ListNode() { }
    ListNode(T data) : data{data}, next{nullptr} { }
    ListNode(T data, shared_ptr<ListNode<T>> next) : data{data}, next{next} { }
    ~ListNode() { while (next) next = std::move(next->next); }
};

class Solution {
public:
    bool isLinkedListAPalindrome(shared_ptr<ListNode<int>> L) {
        // Finds the second half of L.
        shared_ptr<ListNode<int>> slow = L, fast = L;
        while (fast && fast->next) {
            fast = fast->next->next, slow = slow->next;
        }
    
        // Compares the first half and the reversed second half lists.
        auto first_half_iter = L, second_half_iter = reverseLinkedList(slow);
        while (second_half_iter && first_half_iter) {
            if (second_half_iter->data != first_half_iter->data) {
                return false;
            }
            second_half_iter = second_half_iter->next;
            first_half_iter = first_half_iter->next;
        }
        return true;
    }
private:
    shared_ptr<ListNode<int>> reverseLinkedList(const shared_ptr<ListNode<int>>& head) {
        shared_ptr<ListNode<int>> prev = nullptr, curr = head;
        while (curr) {
            auto next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};
```