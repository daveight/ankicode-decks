```java
public class Solution {
    public List<Integer> dutchFlagPartition(List<Integer> A, int pivotIndex) {
        Integer pivot = A.get(pivotIndex);
        /**
         * Keep the following invariants during partitioning:
         * bottom group: A.subList(0, smaller).
         * middle group: A.subList(smaller, equal).
         * unclassified group: A.subList(equal, larger).
         * top group: A.subList(larger, A.size()).
         */
        int smaller = 0, equal = 0, larger = A.size();
        // Keep iterating as long as there is an unclassified element.
        while (equal < larger) {
            // A.get(equal) is the incoming unclassified element.
            if (A.get(equal) < pivot) {
                Collections.swap(A, smaller++, equal++);
            } else if (A.get(equal).equals(pivot)) {
                ++equal;
            } else { // A.get(equal) > pivot.
                Collections.swap(A, equal, --larger);
            }
        }
        return A;
    }
}
```