```cxx
#include <algorithm>
#include <iterator>
#include <limits>
#include <vector>
using std::numeric_limits;
using std::vector;

struct Interval {
    int left;
    int right;
};

class Solution {
public:
    int findMinimumVisits(vector<Interval> intervals) {
        // Sort intervals based on the right endpoints.
        sort(begin(intervals), end(intervals),
             [](const Interval &a, const Interval &b) { return a.right < b.right; });
        int last_visit_time = numeric_limits<int>::min(), num_visits = 0;
        for (const Interval &interval : intervals) {
            if (interval.left > last_visit_time) {
                // The current right endpoint, last_visit_time, will not cover any more
                // intervals.
                last_visit_time = interval.right;
                ++num_visits;
            }
        }
        return num_visits;
    }
};
```