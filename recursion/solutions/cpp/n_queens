```cxx
#include <algorithm>
#include <cstdlib>
#include <iterator>
#include <memory>
#include <vector>
using std::make_unique;
using std::vector;

class Solution {
public:
    vector<vector<int>> nQueens(int n) {
        vector<vector<int>> result;
        solvenQueens(n, 0, make_unique<vector<int>>().get(), &result);
        return result;
    }
private:
    void solvenQueens(int n, int row, vector<int> *col_placement,
                      vector<vector<int>> *result) {
        if (row == n) {
            // All queens are legally placed.
            result->emplace_back(*col_placement);
        } else {
            for (int col = 0; col < n; ++col) {
                col_placement->emplace_back(col);
                if (isValid(*col_placement)) {
                    solvenQueens(n, row + 1, col_placement, result);
                }
                col_placement->pop_back();
            }
        }
    }
    
    // Test if a newly placed queen will conflict any earlier queens
    // placed before.
    bool isValid(const vector<int> &col_placement) {
        int row_id = col_placement.size() - 1;
        for (int i = 0; i < row_id; ++i) {
            if (int diff = abs(col_placement[i] - col_placement[row_id]);
                    diff == 0 || diff == row_id - i) {
                // A column or diagonal constraint is violated.
                return false;
            }
        }
        return true;
    }
};
```