```java
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Random;

public class Solution {
    // The numbering starts from one, i.e., if A = [3,1,-1,2] then
    // findKthLargest(A, 1) returns 3, findKthLargest(A, 2) returns 2,
    // findKthLargest(A, 3) returns 1, and findKthLargest(A, 4) returns -1.
    public int findKthLargest(int k, List<Integer> A) {
        return findKth(A, k, (a, b) -> Integer.compare(b, a));
    }

    // The numbering starts from one, i.e., if A = [3,1,-1,2] then
    // findKthSmallest(A, 1) returns -1, findKthSmallest(A, 2) returns 1,
    // findKthSmallest(A, 3) returns 2, and findKthSmallest(A, 4) returns 3.
    public int findKthSmallest(int k, List<Integer> A) {
        return findKth(A, k, (a, b) -> Integer.compare(a, b));
    }

    public int findKth(List<Integer> A, int k, Comparator<Integer> cmp) {
        int left = 0, right = A.size() - 1;
        Random r = new Random(0);
        while (left <= right) {
            // Generates a random integer in [left, right].
            int pivotIdx = r.nextInt(right - left + 1) + left;
            int newPivotIdx = partitionAroundPivot(left, right, pivotIdx, A, cmp);
            if (newPivotIdx == k - 1) {
                return A.get(newPivotIdx);
            } else if (newPivotIdx > k - 1) {
                right = newPivotIdx - 1;
            } else { // newPivotIdx < k - 1.
                left = newPivotIdx + 1;
            }
        }

        throw new NoSuchElementException("no k-th node in array A");
    }

    // Partitions A.subList(left, right+1) around pivotIdx, returns the new index
    // of the pivot, newPivotIdx, after partition. After partitioning,
    // A.subList(left, newPivotIdx) contains elements that are "greater than" the
    // pivot, and A.subList(newPivotIdx + 1 , right + 1) contains elements that
    // are "less than" the pivot.
    //
    // Note: "greater than" and "less than" are defined by the Comparator object.
    //
    // Returns the new index of the pivot element after partition.
    private int partitionAroundPivot(int left, int right, int pivotIdx, List<Integer> A, Comparator<Integer> cmp) {
        int pivotValue = A.get(pivotIdx);
        int newPivotIdx = left;

        Collections.swap(A, pivotIdx, right);
        for (int i = left; i < right; ++i) {
            if (cmp.compare(A.get(i), pivotValue) < 0) {
                Collections.swap(A, i, newPivotIdx++);
            }
        }
        Collections.swap(A, right, newPivotIdx);
        return newPivotIdx;
    }
}
```