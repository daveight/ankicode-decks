```java
public class Solution {

    /**
     * Keep monotonic deque: containing index, and nums[index] is monotonic in
     * deque peek element is the index of the max number in current sliding
     * window and the numbers that indices in this deque represents are in
     * non-ascending order
     * */
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        if (n == 0) {
            return new int[]{};
        }
        int[] res = new int[n - k + 1];
        // peek element is the index of the max number in current sliding window
        // and the numbers that indices in this deque represents are in non-ascending order
        Deque<Integer> descendIndices = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int window = i - k + 1;
            // poll elements out of current window
            while (!descendIndices.isEmpty() && descendIndices.peekFirst() < i - k + 1) {
                descendIndices.removeFirst();
            }
            // build descending indices
            while (!descendIndices.isEmpty() && nums[descendIndices.peekLast()] < num) {
                descendIndices.removeLast();
            }
            descendIndices.addLast(i);
            if (window >= 0) {
                res[window] = nums[descendIndices.peekFirst()];
            }
        }
        return res;
    }
}
```