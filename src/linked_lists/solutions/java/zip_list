```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {
    public ListNode<Integer> zippingLinkedList(ListNode<Integer> L) {
        if (L == null || L.next == null) {
            return L;
        }

        // Find the second half of L.
        ListNode<Integer> slow = L, fast = L;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }

        ListNode<Integer> firstHalfHead = L, secondHalfHead = slow.next;
        slow.next = null; // Splits the list into two lists.
        secondHalfHead = reverseLinkedList(secondHalfHead);

        // Interleave the first half and the reversed of the second half.
        ListNode<Integer> firstHalfIter = firstHalfHead;
        ListNode<Integer> secondHalfIter = secondHalfHead;
        while (secondHalfIter != null) {
            ListNode<Integer> temp = secondHalfIter.next;
            secondHalfIter.next = firstHalfIter.next;
            firstHalfIter.next = secondHalfIter;
            firstHalfIter = firstHalfIter.next.next;
            secondHalfIter = temp;
        }
        return L;
    }

    private ListNode<Integer> reverseLinkedList(ListNode<Integer> head) {
        ListNode<Integer> prev = null, curr = head;
        while (curr != null) {
            ListNode<Integer> temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}
```