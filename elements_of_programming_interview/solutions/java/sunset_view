```java
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
    private class BuildingWithHeight {
        public Integer id;
        public Integer height;

        public BuildingWithHeight(Integer id, Integer height) {
            this.id = id;
            this.height = height;
        }
    }

    public List<Integer> examineBuildingsWithSunset(List<Integer> list) {
        Iterator<Integer> sequence = list.iterator();
        int buildingIdx = 0;
        Deque<BuildingWithHeight> candidates = new ArrayDeque<>();
        while (sequence.hasNext()) {
            Integer buildingHeight = sequence.next();
            while (!candidates.isEmpty() &&
                         (Integer.compare(buildingHeight, candidates.peekFirst().height) >=
                            0)) {
                candidates.removeFirst();
            }
            candidates.addFirst(
                    new BuildingWithHeight(buildingIdx++, buildingHeight));
        }
        return candidates.stream().map(c -> c.id).collect(Collectors.toList());
    }
}
```