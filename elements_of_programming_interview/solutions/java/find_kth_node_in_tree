```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;
    int size;

    BinaryTreeNode() {
    }

    BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right, int size) {
        this.data = data;
        this.left = left;
        this.right = right;
        this.size = size;
    }
}

public class Solution {
    public int findKthNodeBinaryTree(BinaryTreeNode<Integer> tree, int k) {
        BinaryTreeNode<Integer> iter = convertToTreeWithSize(tree);
        while (iter != null) {
            int leftSize = iter.left != null ? iter.left.size : 0;
            if (leftSize + 1 < k) { // k-th node must be in right subtree of iter.
                k -= (leftSize + 1);
                iter = iter.right;
            } else if (leftSize == k - 1) { // k-th is iter itself.
                return iter.data;
            } else { // k-th node must be in left subtree of iter.
                iter = iter.left;
            }
        }
        // If k is between 1 and the tree size, this line is unreachable.
        return -1;
    }
    public static BinaryTreeNode<Integer> convertToTreeWithSize(BinaryTreeNode<Integer> original) {
        if (original == null)
            return null;
        BinaryTreeNode<Integer> left = convertToTreeWithSize(original.left);
        BinaryTreeNode<Integer> right = convertToTreeWithSize(original.right);
        int lSize = left == null ? 0 : left.size;
        int rSize = right == null ? 0 : right.size;
        return new BinaryTreeNode<>(original.data, left, right, 1 + lSize + rSize);
    }
}
```