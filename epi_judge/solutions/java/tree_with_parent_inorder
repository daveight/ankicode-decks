```java
import java.util.ArrayList;
import java.util.List;

class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;
    BinaryTreeNode<T> parent;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public List<Integer> inorderTraversal(BinaryTreeNode<Integer> tree) {
        addParentLink(tree, null);
        BinaryTreeNode<Integer> prev = null, curr = tree;
        List<Integer> result = new ArrayList<>();

        while (curr != null) {
            BinaryTreeNode<Integer> next;
            if (curr.parent == prev) {
                // We came down to curr from prev.
                if (curr.left != null) { // Keep going left.
                    next = curr.left;
                } else {
                    result.add(curr.data);
                    // Done with left, so go right if right is not empty.
                    // Otherwise, go up.
                    next = (curr.right != null) ? curr.right : curr.parent;
                }
            } else if (curr.left == prev) {
                result.add(curr.data);
                // Done with left, so go right if right is not empty. Otherwise, go up.
                next = (curr.right != null) ? curr.right : curr.parent;
            } else { // Done with both children, so move up.
                next = curr.parent;
            }

            prev = curr;
            curr = next;
        }
        return result;
    }

    private void addParentLink(BinaryTreeNode<Integer> node, BinaryTreeNode<Integer> parent) {
        if (node == null) {
            return;
        }
        node.parent = parent;
        addParentLink(node.left, node);
        addParentLink(node.right, node);
    }
}
```