```python
import functools

T = TypeVar('T')

class BinaryTreeNode(Generic[T]):
    def __init__(self, data: Optional[Type[T]]=None, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
        self.parent = None

def lca_helper(node0, node1):
    def get_depth(node):
        depth = 0
        while node:
            depth += 1
            node = node.parent
        return depth

    depth0, depth1 = map(get_depth, (node0, node1))
    # Makes node0 as the deeper node in order to simplify the code.
    if depth1 > depth0:
        node0, node1 = node1, node0

    # Ascends from the deeper node.
    depth_diff = abs(depth0 - depth1)
    while depth_diff:
        node0 = node0.parent
        depth_diff -= 1

    # Now ascends both nodes until we reach the LCA.
    while node0 is not node1:
        node0, node1 = node0.parent, node1.parent
    return node0

def find_node(tree, val):
    if tree:
        if tree.data == val:
            return tree

        left_result = find_node(tree.left, val)
        if left_result:
            return left_result

        right_result = find_node(tree.right, val)
        if right_result:
            return right_result
    return None

def set_parent(tree, parent):
    if tree is not None:
        if tree is not parent:
            tree.parent = parent
        set_parent(tree.left, tree)
        set_parent(tree.right, tree)

def lca(tree, node0, node1):
    set_parent(tree, tree)
    node0 = find_node(tree, node0)
    node1 = find_node(tree, node1)
    result = lca_helper(node0, node1)

    return result.data
```