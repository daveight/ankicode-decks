```java
public class Solution {

    public boolean exist(String[][] board, String word) {
        if (board.length == 0 || board[0].length == 0) {
            return false;
        }
        int rows = board.length;
        int cols = board[0].length;
        boolean[][] visited = new boolean[rows][cols];
        int wordIndex = 0;
        // because the choices for matching 1st character of word
        // is different from choices for matching rest characters of word, i.e.
        // each position on board can be the 1st position,
        // only adjacent positions can be the position for matching the next
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                // try each possible starting point to
                // match 1st character in word
                if (exist(wordIndex, i, j, rows, cols, board, word, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean exist(int wordIndex, int row, int col, int rows, int cols,
            String[][] board, String word, boolean[][] visited) {
        // base case
        if (wordIndex == word.length()) {
            // word found in board
            return true;
        }

        // recursive case
        if ((row >= 0 && row < rows) && (col >= 0 && col < cols)
                && visited[row][col] == false
                && (board[row][col].equals(String.valueOf(word.charAt(wordIndex))))) {
            // go on searching in adjacent positions
            visited[row][col] = true;
            boolean found = 
                       exist(wordIndex + 1, row - 1, col, rows, cols, board, 
                            word, visited)
                    || exist(wordIndex + 1, row + 1, col, rows, cols, board,
                            word, visited)
                    || exist(wordIndex + 1, row, col - 1, rows, cols, board,
                            word, visited)
                    || exist(wordIndex + 1, row, col + 1, rows, cols, board,
                            word, visited);
            if (found) {
                return true;
            } else {
                visited[row][col] = false;
            }
        }
        return false;
    }
}
```