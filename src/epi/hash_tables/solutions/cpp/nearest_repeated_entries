```cxx
#include <algorithm>
#include <limits>
#include <string>
#include <unordered_map>
#include <vector>
using std::max;
using std::min;
using std::numeric_limits;
using std::string;
using std::unordered_map;
using std::vector;

class Solution {
public:
    int findNearestRepetition(const vector<string> &paragraph) {
        unordered_map<string, int> word_to_latest_index;
        int nearest_repeated_distance = numeric_limits<int>::max();
        for (int i = 0; i < paragraph.size(); ++i) {
            if (auto latest_equal_word = word_to_latest_index.find(paragraph[i]);
                    latest_equal_word != end(word_to_latest_index)) {
                nearest_repeated_distance =
                        min(nearest_repeated_distance, i - latest_equal_word->second);
            }
            word_to_latest_index[paragraph[i]] = i;
        }
        return nearest_repeated_distance != numeric_limits<int>::max()
               ? nearest_repeated_distance
               : -1;
    }
};
```