```java
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public List<Integer> inorderTraversal(BinaryTreeNode<Integer> tree) {
        Deque<BinaryTreeNode<Integer>> s = new ArrayDeque<>();
        BinaryTreeNode<Integer> curr = tree;
        List<Integer> result = new ArrayList<>();

        while (!s.isEmpty() || curr != null) {
            if (curr != null) {
                s.addFirst(curr);
                // Going left.
                curr = curr.left;
            } else {
                // Going up.
                curr = s.removeFirst();
                result.add(curr.data);
                // Going right.
                curr = curr.right;
            }
        }
        return result;
    }
}
```