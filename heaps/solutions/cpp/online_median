```cxx
#include <functional>
#include <queue>
#include <vector>
using std::greater;
using std::less;
using std::priority_queue;
using std::vector;

class Solution {
public:
    vector<double> onlineMedian(const vector<int> &sequence) {
        vector<int>::const_iterator sequence_begin = cbegin(sequence);
        const vector<int>::const_iterator sequence_end = cend(sequence);
        // min_heap stores the larger half seen so far.
        priority_queue<int, vector<int>, greater<>> min_heap;
        // max_heap stores the smaller half seen so far.
        priority_queue<int, vector<int>, less<>> max_heap;
        vector<double> result;
    
        while (sequence_begin != sequence_end) {
            min_heap.emplace(*sequence_begin++);
            max_heap.emplace(min_heap.top());
            min_heap.pop();
            // Ensure min_heap and max_heap have equal number of elements if
            // an even number of elements is read; otherwise, min_heap must have
            // one more element than max_heap.
            if (max_heap.size() > min_heap.size()) {
                min_heap.emplace(max_heap.top());
                max_heap.pop();
            }
    
            result.emplace_back(min_heap.size() == max_heap.size()
                                ? 0.5 * (min_heap.top() + max_heap.top())
                                : min_heap.top());
        }
        return result;
    }
};
```