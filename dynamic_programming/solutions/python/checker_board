```python
import sys

q = []
p = []
n = 0

def compute_shortest_path_arrays(costs):
    global q
    global p
    global n

    n = len(costs[0])
    p = [[0 for x in range(n + 2)] for y in range(n + 2)]
    q = [[0 for x in range(n + 2)] for y in range(n + 2)]

    for x in range(1, n + 1):
        q[1][x] = costs[1 - 1][x - 1]

    for y in range(1, n + 1):
        q[y][0] = sys.maxsize
        q[y][n + 1] = sys.maxsize

    for y in range(2, n + 1):
        for x in range(1, n + 1):
            m = min(q[y - 1][x - 1], q[y - 1][x], q[y - 1][x + 1])
            q[y][x] = m + costs[y - 1][x - 1]
            if m == q[y - 1][x - 1]:
                p[y][x] = -1
            elif m == q[y - 1][x]:
                p[y][x] = 0
            else:
                p[y][x] = 1

def get_path(y, x, paths):
    paths.append(x);
    if y == 2:
        paths.append(x + p[y][x]);
    else:
        get_path(y - 1, x + p[y][x], paths);

def checker_board_min_path(costs):
    global q
    global p
    global n
    compute_shortest_path_arrays(costs)
    minIndex = 1
    mn = q[n][1]
    for i in range(2, n + 1):
        if q[n][i] < mn:
            minIndex = i
            mn = q[n][i]
    path = []
    get_path(n, minIndex, path)

    return path
```
