```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public List<List<Integer>> levelOrder(BinaryTreeNode<Integer> root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<BinaryTreeNode<Integer>> level = new LinkedList<>();
        level.offer(root);
        while (!level.isEmpty()) {
            int sz = level.size();
            List<Integer> levelList = new ArrayList<>();
            for (int i = 0; i < sz; i++) {
                BinaryTreeNode<Integer> node = level.poll();
                levelList.add(node.data);
                if (node.left != null) {
                    level.offer(node.left);
                }
                if (node.right != null) {
                    level.offer(node.right);
                }
            }
            res.add(levelList);
        }
        return res;
    }
}
```