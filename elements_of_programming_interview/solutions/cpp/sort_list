```cxx
#include <memory>

template<typename T>

struct ListNode {
public:
    T data;
    shared_ptr<ListNode<T>> next;
    ListNode() { }
    ListNode(T data) : data{data}, next{nullptr} { }
    ListNode(T data, shared_ptr<ListNode<T>> next) : data{data}, next{next} { }
};

class Solution {
public:
    shared_ptr<ListNode<int>> stableSortList(shared_ptr<ListNode<int>> L) {
        // Base cases: L is empty or a single node, nothing to do.
        if (L == nullptr || L->next == nullptr) {
            return L;
        }

        // Find the midpoint of L using a slow and a fast pointer.
        shared_ptr<ListNode<int>> pre_slow = nullptr, slow = L, fast = L;
        while (fast && fast->next) {
            pre_slow = slow;
            fast = fast->next->next, slow = slow->next;
        }

        pre_slow->next = nullptr;  // Splits the list into two equal-sized lists.

        return mergeTwoSortedLists(stableSortList(L), stableSortList(slow));
    }

private:
    shared_ptr<ListNode<int>> mergeTwoSortedLists(shared_ptr<ListNode<int>> L1,
                                                  shared_ptr<ListNode<int>> L2) {
        // Creates a placeholder for the result.
        shared_ptr<ListNode<int>> dummy_head(new ListNode<int>);
        auto tail = dummy_head;

        while (L1 && L2) {
            AppendNode(L1->data <= L2->data ? &L1 : &L2, &tail);
        }

        // Appends the remaining nodes of L1 or L2.
        tail->next = L1 ? L1 : L2;
        return dummy_head->next;
    }

    void AppendNode(shared_ptr<ListNode<int>> *node,
                    shared_ptr<ListNode<int>> *tail) {
        (*tail)->next = *node;
        *tail = *node;  // Updates tail.
        *node = (*node)->next;
    }
};
```