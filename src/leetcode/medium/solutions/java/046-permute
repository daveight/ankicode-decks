```java
public class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (nums.length == 0) {
            return result;
        }
        // put the seed set into result
        result.add(new ArrayList<>(Arrays.asList(nums[0])));
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            List<List<Integer>> next = new ArrayList<>();
            // try to insert num into each existing sets in result
            for (int j = 0; j <= i; j++) {
                // insert num[i] at position j of each existing set
                for (List<Integer> list : result) {
                    // create new copy of list is faster than operation on
                    // the same code
                    List<Integer> expanding = new ArrayList<>(list);
                    expanding.add(j, num);
                    next.add(expanding);
                    
                    //slow version: because list.remove() is O(N)
//                    list.add(j, num);
//                    next.add(list);
//                    list.remove(j);
                }
            }
            result = next;
        }
        return result;
    }
}
```