```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public BinaryTreeNode<Integer> recoverTree(BinaryTreeNode<Integer> root) {
        List<BinaryTreeNode<Integer>> in = new ArrayList<>();
        inorder(root, in);
        BinaryTreeNode<Integer> first = null;
        BinaryTreeNode<Integer> second = null;
        for (int i = 0; i < in.size() - 1; i++) {
            if (first == null && in.get(i).data > in.get(i + 1).data) {
                first = in.get(i);
            }
            if (first != null && in.get(i).data > in.get(i + 1).data) {
                second = in.get(i + 1);
            }
        }
        if (first != null && second != null) {
            int temp = first.data;
            first.data = second.data;
            second.data = temp;
        }
        return root;
    }

    private void inorder(BinaryTreeNode<Integer> root, List<BinaryTreeNode<Integer>> in) {
        if (root == null) {
            return;
        }
        inorder(root.left, in);
        in.add(root);
        inorder(root.right, in);
    }
}
```