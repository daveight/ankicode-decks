```cxx
#include <limits>
#include <memory>

using std::numeric_limits;
using std::shared_ptr;

template <typename T>

struct BinaryTreeNode {
    T data;
    shared_ptr<BinaryTreeNode<T>> left;
    shared_ptr<BinaryTreeNode<T>> right;
    BinaryTreeNode() { }
    BinaryTreeNode(T data, shared_ptr<BinaryTreeNode<T>> left, shared_ptr<BinaryTreeNode<T>> right) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
};

class Solution {
public:
    bool isBinaryTreeBST(const shared_ptr<BinaryTreeNode<int>> &tree) {
        return AreKeysInRange(tree, numeric_limits<int>::min(),
                              numeric_limits<int>::max());
    }

    bool AreKeysInRange(const shared_ptr<BinaryTreeNode<int>> &tree, int low_range,
                        int high_range) {
        if (tree == nullptr) {
            return true;
        } else if (tree->data < low_range || tree->data > high_range) {
            return false;
        }

        return AreKeysInRange(tree->left, low_range, tree->data) &&
               AreKeysInRange(tree->right, tree->data, high_range);
    }

    bool InorderTraversal(const shared_ptr<BinaryTreeNode<int>> &tree,
                          BinaryTreeNode<int> **prev) {
        if (!tree) {
            return true;
        } else if (!InorderTraversal(tree->left, prev)) {
            return false;
        } else if (*prev && (*prev)->data > tree->data) {
            return false;
        }
        *prev = tree.get();
        return InorderTraversal(tree->right, prev);
    }
};
```