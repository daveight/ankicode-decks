"Zig Zag Conversion"	"Time : O(N) ; Space: O(N)
 
Description:
The string ""PAYPALISHIRING"" is written in a zigzag pattern on a given 
number of rows like this: (you may want to display this pattern in a 
fixed font for better legibility) 
P   A   H   N 
A P L S I I G 
Y   I   R 
And then read line by line: ""PAHNAPLSIIGYIR"" 
Write the code that will take a string and make this conversion given a 
number of rows: 
string convert(string text, int nRows); 
convert(""PAYPALISHIRING"", 3) 
should return ""PAHNAPLSIIGYIR"".
 
{@link https://leetcode.com/problems/zigzag-conversion/ }"	"convert"	"### Java
```java
public class Solution {

    private int[] indices;

    public String convert(String s, int numRows) {
        if (numRows <= 0) {
            return """";
        } else if (numRows == 1) {
            return s;
        }
        // construct indices
        constructIndices(numRows);

        // zigzag converting
        int index = 0;
        List<StringBuilder> strs = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            strs.add(new StringBuilder());
        }
        for (int i = 0; i < s.length(); i++) {
            if (index == indices.length) {
                index = 0;
            }
            int j = indices[index];
            strs.get(j).append(s.charAt(i));
            index++;
        }

        // construct result
        StringBuilder str = new StringBuilder();
        for (StringBuilder ss : strs) {
            str.append(ss);
        }
        return str.toString();
    }

    private void constructIndices(int B) {
        indices = new int[B + B - 2];
        int index = 0;
        for (int i = 0; i < B; i++) {
            indices[index++] = i;
        }
        for (int i = 0; i < B - 2; i++) {
            indices[index++] = B - 2 - i;
        }
    }
}
```"	"string[a];int[b];string
""PAYPALISHIRING"";3;""PAHNAPLSIIGYIR""
""ABCD"";2;""ACBD""

"
"Reverse Integer"	"Time : O(); Space : O()
 
Description: 
Reverse digits of an integer. 
Example1: x = 123, return 321
Example2: x = -123, return -321 
Return 0 if the result overflows and does not fit in a 32 bit signed integer
 
 
{@link https://leetcode.com/problems/reverse-integer/ }"	"reverse"	"### Java
```java
public class Solution {
    public int reverse(int x) {
        long result = 0;
        while (x != 0) {
            // adding the last digit from original number
            result = result * 10 + x % 10;
            x /= 10;
        }
        return (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) ? 0 : (int) result;
    }
}
```"	"int[x];int
1000000003;0
10000;1
2147483647;0
-2147483648;0
-1234567891;-1987654321
"
"Palindrome Number"	"Time : O(N); Space : O(1)
 
Description: 
Determine whether an integer is a palindrome. Do this without extra space.
For this problem, negative numbers are considered not palindrome number.
 
{@link https://leetcode.com/problems/palindrome-number/ }
1. compare head and tail in one number
2. reverse a number; counting digits of number"	"isPalindrome"	"### Java
```java
public class Solution {

    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }
        int digits = x == 0 ? 1 : 0;
        int num = x;
        // count the digits in x
        while (num != 0) {
            num /= 10;
            digits++;
        }
        
        // construct the reversed second half of the number
        int rev = 0;
        int upper = (digits - 1) / 2;
        for (int i = 0; i <= upper; i++) {
            // add the tailing number from x to reversing number
            rev = rev * 10 + x % 10;
            x /= 10;
        }
        // if odd number, not rev has one more digit for comparing,
        // so we should compare rev / 10 with x; otherwise compare rev with x
        return rev == x || rev / 10 == x;
    }
}
```"	"int[x];bool
-2;false
-101;false
2;true
202;true
2021;false
2147483647;false
21477412;true
0;true
"
"Roman To Integer"	"Time : O(); Space : O()
 
Description: 
Given a roman numeral, convert it to an integer. 
Input is guaranteed to be within the range from 1 to 3999.
 
{@link https://leetcode.com/problems/roman-to-integer/ }"	"romanToInt"	"### Java
```java
public class Solution {
    
    private Map<Character, Integer> map = new HashMap<Character, Integer>() {{
       put('I', 1);
       put('V', 5);
       put('X', 10);
       put('L', 50);
       put('C', 100);
       put('D', 500);
       put('M', 1000);
    }};
    
    public int romanToInt(String s) {
        int i = 0;
        int len = s.length();
        int result = 0;
        while (i < len) {
            int num = map.get(s.charAt(i));
            if (i + 1 < len && num < map.get(s.charAt(i + 1))) {
                result -= num;
            } else {
                result += num;
            }
            i++;
        }
        return result;
    }
}
```"	"string[s];int
""I"";1
""IV"";4
""IX"";9
""CCVII"";207
""MLXVI"";1066
""MCMLIV"";1954
"
"Longest Common Prefix"	"Time : O(N); Space : O(N)
 
Description: 
Write a function to find the longest common prefix string amongst an array of strings.
 
{@link https://leetcode.com/problems/longest-common-prefix/ }"	"longestCommonPrefix"	"### Java
```java
public class Solution {

    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) {
            return """";
        }
        // find the shortest string
        int shortest = Integer.MAX_VALUE;
        for (String str : strs) {
            shortest = Math.min(shortest, str.length());
        }
        
        int i = 0;
        while (i < shortest) {
            // check every string whether they have ch at position i
            for (String str : strs) {
                if (str.charAt(i) != strs[0].charAt(i)) {
                    return strs[0].substring(0, i);
                }
            }
            i++;
        }
        return strs[0].substring(0, shortest);
    }
}
```"	"array(string)[strs];string
[""aa"", ""a""];""a""
[""abcdefgh"", ""aefghijk"", ""abcefgh""];""a""
["""", ""aefghijk"", ""abcefgh""];""""
[""bcdefgh"", ""befghijk"", ""bcefgh""];""b""
"
"Remove Nth Node From End Of List"	"Time : O(N); Space: O(1)
 
Description: 
Given a linked list, remove the nth node from the end of list and return 
its head. 
For example, 
Given linked list: 1->2->3->4->5, and n = 2. 
After removing the second node from the end, the linked list 
becomes 1->2->3->5. 
Note: 
Given n will always be valid. Try to do this in one pass.
 
{@link https://leetcode.com/problems/remove-nth-node-from-end-of-list/ }
1. slow-fast two pointers on linked list"	"removeNthFromEnd"	"### Java
```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || n <= 0) {
            return null;
        }
        ListNode<Integer> dummyHead = new ListNode();
        dummyHead.data = 0;
        dummyHead.next = head;

        ListNode<Integer> fast = dummyHead;
        ListNode<Integer> slow = dummyHead;

        // let fast point go n steps itself
        for (int i = 0; i < n; i++) {
            assert (fast != null);
            fast = fast.next;
        }

        // fast and slow go together
        // until fast reaches the end of list
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }

        // now slow should pointing to the node
        // before which we want to remove
        slow.next = slow.next.next;

        return dummyHead.next;
    }
}
```"	"linked_list(int)[head];int[val];linked_list(int)
[1,1,2,2,3,3,4,4,5];2;[1,2,3,5]
[1,1,2,2,3,3,4,4,5];5;[2,3,4,5]
[1,1,2,2,3,3,4,4,5];1;[1,2,3,4]
[1];1;[]
"
"Valid Parentheses"	"Time : O(N) ; Space O(N)
 
Description: 
Given a string containing just the characters '(', ')', '{', '}', '[' and ']',
determine if the input string is valid. 
The brackets must close in the correct order, ""()"" and ""()[]{}"" are all 
valid but ""(]"" and ""([)]"" are not.
 
 
{@link https://leetcode.com/problems/valid-parentheses/ }"	"isValid"	"### Java
```java
public class Solution {

    /**
     * add a global map to make code to be more extensible and more concise
     */
    private static final Map<Character, Character> parentheseMap = new HashMap<Character, Character>() {
        {
            put('(', ')');
            put('{', '}');
            put('[', ']');
        }
    };

    public boolean isValid(String s) {
        int len = s.length();
        if (len % 2 != 0) {
            // for string of odd-number length, return false immediately
            return false;
        }
        Stack<Character> lefts = new Stack<Character>();
        for (char ch : s.toCharArray()) {
            if (parentheseMap.containsKey(ch)) {
                lefts.push(parentheseMap.get(ch));
            } else {
                // for '}', ']', ')',
                // return false if nothing left in stack or not matching
                if (lefts.isEmpty() || lefts.pop() != ch) {
                    return false;
                }
            }
        }
        return lefts.isEmpty();
    }
}
```"	"string[s];bool
""[]"";true
""[]"";true
""()"";true
"""";true
"")"";false
""([[]])"";true
""([[(]])"";false
""([[]]()[[]])"";true
""([[])"";false
""(]"";false
""([]]"";false
"
"Merge Two Sorted Lists"	"Time : O(M + N); Space: O(1)
 
Description: 
Merge two sorted linked lists and return it as a new list. The new list 
should be made by splicing together the nodes of the first two lists.
 
{@link https://leetcode.com/problems/merge-two-sorted-lists/  }"	"mergeTwoLists"	"### Java
```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {

    public ListNode<Integer> mergeTwoLists(ListNode<Integer> l1, ListNode<Integer> l2) {
        ListNode<Integer> dummyHead = new ListNode<>();
        dummyHead.data = 0;
        ListNode<Integer> node = dummyHead;
        while (l1 != null && l2 != null) {
            if (l1.data <= l2.data) {
                node.next = l1;
                l1 = l1.next;
            } else {
                node.next = l2;
                l2 = l2.next;
            }
            node = node.next;
        }
        // append the remaining list
        node.next = (l1 != null) ? l1 : l2;
        return dummyHead.next;
    }
}
```"	"linked_list(int)[l1];linked_list(int)[l2];linked_list(int)
[1];[2];[1,2]
[1,1,3,2,5];[2,1,4,2,6];[1,2,3,4,5,6]
[1,1,5];[2,1,4,2,6];[1,2,4,5,6]
[1,1,3,2,5];[2,1,4];[1,2,3,4,5]
"
"Remove Duplicates From Sorted Array"	"Time : O(N); Space: O(1)
 
Description: 
Given a sorted array, remove the duplicates in place such that each 
element appear only once and return the new length. 
Do not allocate extra space for another array, you must do this in 
place with constant memory. 
For example, Given input array nums = [1,1,2], 
Your function should return length = 2, with the first two elements of 
nums being 1 and 2 respectively. It doesn't matter what you leave 
beyond the new length.
 
{@link https://leetcode.com/problems/remove-duplicates-from-sorted-array/ }"	"removeDuplicates"	"### Java
```java
public class Solution {

    // similar idea to partition
    public int removeDuplicates(int[] nums) {
        int j = -1; // index of last unique element
        for (int i = 0; i < nums.length; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                nums[++j] = nums[i];
            }
        }
        return j + 1;
    }

    // version2
    public int removeDuplicates2(int[] nums) {
        int j = -1; // index of last unique element
        for (int i = 0; i < nums.length; i++) {
            if (i != 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            nums[++j] = nums[i];
        }
        return j + 1;
    }
}
```"	"array(int)[nums];int
[ 1, 1, 2 ];2
[ 1, 1, 2, 2, 2, 3, 3 ];3
[ 1, 2, 3 ];3
[ 1, 2, 3, 3, 3, 3 ];3
[ 1, 2, 2, 2, 3 ];3
[ ];0
[ 10, 20, 20, 30, 40, 40, 50];5
"
"Remove Element"	"Time : O(N); Space: O(1)
 
Description: 
Given an array and a value, remove all instances of that value in place 
and return the new length. 
The order of elements can be changed. 
It doesn't matter what you leave beyond the new length.
 
{@link https://leetcode.com/problems/remove-element/ }"	"removeElement"	"### Java
```java
public class Solution {

    // send-to-the-right-place
    public int removeElement(int[] nums, int val) {
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            while (nums[i] == val && i < len) {
                nums[i] = nums[--len];
            }
        }
        return len;
    }
}
```"	"array(int)[nums];int[val];int
[1,1,1];1;0
[1, 1, 1, 2, 2, 2];2;3
[1, 1, 2, 3, 3, 3];3;3
[1, 1, 2, 3, 3, 3, 4];4;6
[1, 1, 2, 3, 3, 3, 4];5;7
[];0;0
[4,5];4;1
"
"Implement Str Str"	"Time : O(N); Space: O(1)
 
Description: 
Implement strStr(). 
Returns the index of the first occurrence of needle in haystack, 
or -1 if needle is not part of haystack.
 
 
{@link https://leetcode.com/problems/implement-strstr/ }"	"strStr"	"### Java
```java
public class Solution {

    // try each possible start index from haystack
    public int strStr(String haystack, String needle) {
        for (int index = 0; index <= haystack.length() - needle.length(); index++) {
            int i = index;
            int j = 0;
            while (j < needle.length() && haystack.charAt(i) == needle.charAt(j)) {
                i++;
                j++;
            }
            if (j == needle.length()) {
                // found
                return index;
            }
        }
        return -1;
    }
}
```"	"string[haystack];string[needle];int
""needle"";""needle"";0
""nnneedle"";""needle"";2
""neeneedle"";""needle"";3
""neeneedleneedle"";""needle"";3
""neeneedlenee"";""needle"";3
""nenedlenee"";""needle"";-1
"""";"""";-1
"""";"""";0
"
"Valid Sudoku"	"Time : O(N^2); Space: O(N^2)
 
Description: 
Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules. 
The Sudoku board could be partially filled, where empty cells are 
filled with the character '.'. 
Note: 
A valid Sudoku board (partially filled) is not necessarily solvable. 
Only the filled cells need to be validated.
 
{@link https://leetcode.com/problems/valid-sudoku/ }"	"isValidSudoku"	"### Java
```java
public class Solution {

    public boolean isValidSudoku(String[][] board) {
        // 0 means not exist, 1 means occupied
        int[][] rows = new int[9][9];
        int[][] cols = new int[9][9];
        int[][] cells = new int[9][9];

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char ch = board[i][j].charAt(0);
                // '.' is placeholder for no digit filled there
                if (ch != '.') {
                    int digitIndex = ch - '1';
                    if (rows[i][digitIndex] != 0 || cols[j][digitIndex] != 0
                            || cells[i / 3 * 3 + j / 3][digitIndex] != 0) {
                        // if this digit has been used
                        return false;
                    }

                    // fill board
                    rows[i][digitIndex] = 1;
                    cols[j][digitIndex] = 1;
                    cells[i / 3 * 3 + j / 3][digitIndex] = 1;
                }
            }
        }

        return true;
    }
}
```"	"array(array(string))[board];bool
[[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]];true
true
[[""5"", ""3"", ""."", ""."", ""6"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""."", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]];false
[[""5"", ""3"", ""."", ""."", ""7"", ""."", ""."", ""."", "".""], [""6"", ""."", ""."", ""1"", ""9"", ""5"", ""."", ""."", "".""], [""."", ""9"", ""8"", ""."", ""."", ""."", ""."", ""6"", "".""], [""8"", ""."", ""."", ""."", ""6"", ""."", ""."", ""."", ""3""], [""4"", ""."", ""8"", ""8"", ""."", ""3"", ""."", ""."", ""1""], [""7"", ""."", ""."", ""."", ""2"", ""."", ""."", ""."", ""6""], [""."", ""6"", ""."", ""."", ""."", ""."", ""2"", ""8"", "".""], [""."", ""."", ""."", ""4"", ""1"", ""9"", ""."", ""."", ""5""], [""."", ""."", ""."", ""."", ""8"", ""."", ""."", ""7"", ""9""]];false
"
"Count And Say"	"Time : O(N); Space: O(N)
 
Description: 
The count-and-say sequence is the sequence of integers beginning as 
follows: 1, 11, 21, 1211, 111221, ... 
1 is read off as ""one 1"" or 11.
11 is read off as ""two 1s"" or 21. 
21 is read off as ""one 2, then one 1"" or 1211. 
Given an integer n, generate the nth sequence. 
Note: The sequence of integers will be represented as a string.
 
 
{@link https://leetcode.com/problems/count-and-say/ }"	"countAndSay"	"### Java
```java
public class Solution {
    
    public String countAndSay(int n) {
        StringBuilder sb = new StringBuilder(""1"");
        for (int i = 1; i < n; i++) {
            StringBuilder next = new StringBuilder();
            int index = 0;
            int count = 0;
            while (index <= sb.length()) {
                if (index == 0 || (index < sb.length() && sb.charAt(index) == sb.charAt(index - 1))) {
                    count++;
                } else {
                    next.append(count).append(sb.charAt(index - 1));
                    count = 1;
                }
                index++;
            }
            sb = next;
        }
        return sb.toString();
    }

    public String countAndSay2(int n) {
        if (n < 1) {
            return """";
        }
        // initialize 
        StringBuilder str = new StringBuilder(""1"");
        for (int i = 1; i < n ; i++) {
            StringBuilder say = new StringBuilder();
            // count the number by group
            int len = str.length();
            int index = 0;
            while (index < len) {
                int count = 1;
                while (index < len - 1 && str.charAt(index) == str.charAt(index + 1)) {
                    count++;
                    index++;
                }
                say.append(count + """" + str.charAt(index));
                index++;
            }
            str = say;
        }
        return str.toString();
    }
}
```"	"int[n];string
1;""1""
2;""11""
3;""21""
4;""1211""
5;""111221""
"
"Length Of Last Word"	"Time : O(); Space: O()
 
Description: 
Given a string s consists of upper/lower-case alphabets and empty space 
characters ' ', return the length of last word in the string. 
If the last word does not exist, return 0. 
Note: A word is defined as a character sequence consists of non-space 
characters only. 
For example, Given s = ""Hello World"", return 5.
 
{@link https://leetcode.com/problems/length-of-last-word/ }"	"lengthOfLastWord"	"### Java
```java
public class Solution {

    public int lengthOfLastWord(String s) {
        if (s.length() == 0) {
            return 0;
        }
        String[] parts = s.split("" "");
        return parts.length == 0 ? 0 : parts[parts.length - 1].length();
    }
}
```"	"string[s];int
""Hello World"";5
""Hello World"";5
""Hello World "";5
""Hello"";5
""Hello "";5
""a "";1
"" "";0
"" "";0
"
"Plus One"	"Time : O(N); Space: O(1)
 
Description: 
Given a non-negative number represented as an array of digits, plus one 
to the number. 
The digits are stored such that the most significant digit is at the 
head of the list.
 
{@link https://leetcode.com/problems/plus-one/ }"	"plusOne"	"### Java
```java
public class Solution {
    public int[] plusOne(int[] digits) {
        int len = digits.length;
        int[] result = new int[len];

        // one to plus
        int carry = 1;
        // loop digits backwards
        for (int i = len - 1; i >= 0; i--) {
            int digit = carry + digits[i];
            result[i] = digit % 10;
            carry = digit / 10;
        }

        if (carry != 0) {
            // 99...9 scenario
            result = new int[len + 1];
            result[0] = 1;
        }
        return result;
    }
}
```"	"array(int)[digits];array(int)
[ 1 ];[ 2 ]
[ 0 ];[ 1 ]
[ 9 ];[ 1, 0 ]
[ 1, 0 ];[ 1, 1 ]
[ 1, 9 ];[ 2, 0 ]
[ 9, 9, 9 ];[ 1, 0, 0, 0 ]
"
"Add Binary"	"Time : O(); Space: O()
 
Description: 
Given a non-negative number represented as an array of digits, plus one 
to the number. 
The digits are stored such that the most significant digit is at the 
head of the list.
 
{@link https://leetcode.com/problems/add-binary/ }"	"addBinary"	"### Java
```java
public class Solution {

    public String addBinary(String a, String b) {
        StringBuilder sb = new StringBuilder();
        int carry = 0;
        int i = a.length() - 1;
        int j = b.length() - 1;
        while (i >= 0 || j >= 0 || carry != 0) {
            int num1 = i >= 0 ? a.charAt(i--) - '0' : 0;
            int num2 = j >= 0 ? b.charAt(j--) - '0' : 0;
            int num = num1 + num2 + carry;
            sb.append(num % 2);
            carry = num / 2;
        }
        return sb.reverse().toString();
    }
}
```"	"string[a];string[b];string
""11"";""1"";""100""
""0"";""1"";""1""
""10"";""1"";""11""
""11"";""111"";""1010""
""101"";""11"";""1000""
""1100101110100101000110011011010010101"";""1110011100110110101110010011111011100110001011"";""1110011110011100100010111100101111000000100000""
""1010110111001101101000"";""1000011011000000111100110"";""1001110001111010101001110""
""1"";"""";""1""
"
"Climbing Stairs"	"Time : O(); Space: O()
 
Description
You are climbing a stair case. It takes n steps to reach to the top. 
Each time you can either climb 1 or 2 steps. In how many distinct ways 
can you climb to the top?
 
{@link https://leetcode.com/problems/climbing-stairs/ }"	"climbStairs"	"### Java
```java
public class Solution {

    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int n1 = 1;
        int n2 = 2;
        int result = n2;
        for (int i = 2; i < n; i++) {
            result = n1 + n2;
            n1 = n2;
            n2 = result;
        }
        return result;
    }
}
```"	"int[n];int
1;1
2;2
3;3
"
"Remove Duplicates From Sorted List"	"Time : O(N); Space: O(1)
 
Description: 
Given a sorted linked list, delete all duplicates such that each 
element appear only once. 
For example, 
 Given 1->1->2, return 1->2. 
 Given 1->1->2->3->3, return 1->2->3.
 
 
{@link https://leetcode.com/problems/remove-duplicates-from-sorted-list/ }"	"deleteDuplicates"	"### Java
```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {

    public ListNode<Integer> deleteDuplicates(ListNode<Integer> head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode<Integer> dummy = new ListNode<>();
        dummy.next = head;
        ListNode<Integer> node = head;
        while (node != null) {
            if (node.next != null && node.data == node.next.data) {
                node.next = node.next.next;
            } else {
                node = node.next;
            }
        }
        return dummy.next;
    }
}
```"	"linked_list(int)[head];linked_list(int)
[1,1,1,2,2];[1,2]
[1,1,1,2,2,3,3,4,3];[1,2,3]
[1,1,1,2,1,3,1,4,1,5,1];[1]
"
"Merge Sorted Array"	"Time : O(m + n); Space: O(1)
 
Description: 
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 
as one sorted array. 
Note: 
You may assume that nums1 has enough space (size that is greater or equal 
to m + n) to hold additional elements from nums2. The number of elements 
initialized in nums1 and nums2 are m and n respectively.
 
{@link https://leetcode.com/problems/merge-sorted-array/ }"	"merge"	"### Java
```java
public class Solution {

    public int[] merge(int[] nums1, int m, int[] nums2, int n) {
        int mergeIndex = m + n - 1;
        int index1 = m - 1;
        int index2 = n - 1;

        // when all elements in nums2 are merged, job's done
        while (index2 >= 0) {
            // choose from B if no element is left in nums1
            // or nums2 has larger element
            if (index1 < 0 || nums2[index2] > nums1[index1]) {
                nums1[mergeIndex--] = nums2[index2--];
            } else {
                nums1[mergeIndex--] = nums1[index1--];
            }
        }
        return nums1;
    }
}
```"	"array(int)[nums1];int[m];array(int)[nums2];int[n];array(int)
[1,2,3,0,0];3;[ 5, 6 ];2;[ 1, 2, 3, 5, 6 ]
[3,5,6,0,0];3;[ 1, 2 ];2;[ 1, 2, 3, 5, 6 ]
[2,3,5,0, 0];3;[ 1, 6 ];2;[ 1, 2, 3, 5, 6 ]
[2,3,6,0,0];3;[ 1, 5 ];2;[ 1, 2, 3, 5, 6 ]
[2,3,6];3;[];0;[ 2, 3, 6 ]
"
"Same Tree"	"Time : O(N); Space: O(1)
 
Description: 
Given two binary trees, write a function to check if they are equal or not. 
Two binary trees are considered equal if they are structurally identical 
and the nodes have the same value.
 
{@link https://leetcode.com/problems/same-tree/ }"	"isSameTree"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public boolean isSameTree(BinaryTreeNode<Integer> p, BinaryTreeNode<Integer> q) {
        if (p == null && q == null) {
            return true;
        } else if (p != null && q != null) {
            // here should not be (p == q) which compares the reference value
            // of two objects
            return p.data == q.data && isSameTree(p.left, q.left)
                    && isSameTree(p.right, q.right);
        } else {
            return false;
        }
    }
}
```"	"binary_tree(int)[p];binary_tree(int)[q];bool
[1, null];[1, null];true
[1, null];[2, null];false
[1, 3, 2];[1, 2, 5];false
[1, 4, 3];[1, 2, 5];false
[1, 2, 3];[1, 2, 3, 4];false
"
"Symmetric Tree"	"Time : O(); Space: O()
 
Description: 
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center). 
For example, this binary tree is symmetric: 
    1
   / \ 
  2   2
 / \ / \ 
3  4 4  3 
But the following is not: 
   1 
  / \ 
 2   2 
  \   \ 
   3    3 
Note: 
Bonus points if you could solve it both recursively and iteratively.
 
{@link https://leetcode.com/problems/symmetric-tree/ }"	"isSymmetric"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public boolean isSymmetric(BinaryTreeNode<Integer> root) {
        if (root == null) {
            // base case
            return true;
        }
        return isMirror(root.left, root.right);
    }

    private boolean isMirror(BinaryTreeNode<Integer> left, BinaryTreeNode<Integer> right) {
        if (left == null && right == null) {
            return true;
        } else if (left != null && right != null) {
            return left.data == right.data
                    && isMirror(left.left, right.right)
                    && isMirror(left.right, right.left) ;
        } else {
            return false;
        }
    }
}
```"	"binary_tree(int)[root];bool
[1, null];true
[1, 2, 2, null, 4, 4];true
[1, 2, 3];false
[1, null, 3];false
[1, 3, 3, 4, null, 4];false
[1, 2, 2, 8, 4, 4, 8];true
"
"Binary Tree Level Order Traversal"	"Time : O(N); Space: O(N)
 
Description: 
Given a binary tree, return the level order traversal of its nodes' values. 
(ie, from left to right, level by level). 
For example: Given binary tree {3,9,20,#,#,15,7}, 
   3 
  / \ 
 9  20
   /  \
  15   7 
return its level order traversal as:
[ [3], [9,20], [15,7] ]
 
 
{@link https://leetcode.com/problems/binary-tree-level-order-traversal/ }"	"levelOrder"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public List<List<Integer>> levelOrder(BinaryTreeNode<Integer> root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<BinaryTreeNode<Integer>> level = new LinkedList<>();
        level.offer(root);
        while (!level.isEmpty()) {
            int sz = level.size();
            List<Integer> levelList = new ArrayList<>();
            for (int i = 0; i < sz; i++) {
                BinaryTreeNode<Integer> node = level.poll();
                levelList.add(node.data);
                if (node.left != null) {
                    level.offer(node.left);
                }
                if (node.right != null) {
                    level.offer(node.right);
                }
            }
            res.add(levelList);
        }
        return res;
    }
}
```"	"binary_tree(int)[root];list(list(int))
[3, 9, 20, null, null, 15, 17];[[3], [9, 20], [15, 17]]
[3, 9, 20, null, null, 15];[[3], [9, 20], [15]]
[3, null, 20, 15];[[3], [20], [15]]
null;[]
[1, null];[[1]]
[1, null, 2, 3];[[1], [2], [3]]
[1, 3, null, 3];[[1], [3], [3]]
[5, 4, 8, 11, null, 13, 4, 7, 2, 5, 1];[[5], [4, 8], [11, 13, 4], [7, 2, 5, 1]]
[8, null, 6, 3, 7, 2, 4, null, 10];[[8], [6], [3, 7], [2, 4, 10]]
"
"Maximum Depth Of Binary Tree"	"Time : O(N); Space : O()
 
Description: 
Given a binary tree, find its maximum depth. 
The maximum depth is the number of nodes along the longest path from 
the root node down to the farthest leaf node.
 
{@link https://leetcode.com/problems/maximum-depth-of-binary-tree/ }"	"maxDepth"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    // post-order traversal of DFS
    public int maxDepth(BinaryTreeNode<Integer> rootNode) {
        // base case
        if (rootNode == null) {
            return 0;
        }
        // recursive case
        return 1 + Math.max(maxDepth(rootNode.left), maxDepth(rootNode.right));
    }
}
```"	"binary_tree(int)[rootNode];int
null;0
[1, null];1
[1, null, 2, null, 3];3
[1, 2, null, 3];3
[1, 2, 3];2
[5, 4, 8, 11, null, 13, 4, 7, 2, 5, 1];4
[10, 5, 12, 4, 7];3
[1, null, 2, 3];3
[5, 4, 8, null, null, 13, 14, null, null, 5, 1];4
[8, 6, 18, 3, 7, 10, 20, null, 5, null, null, null, null, null, null, 4];5
"
"Binary Tree Level Order Traversal I I"	"Time : O(); Space: O()
 
Description: 
Given a binary tree, return the bottom-up level order traversal of its 
nodes' values. (ie, from left to right, level by level from leaf to root). 
For example: 
Given binary tree {3,9,20,#,#,15,7}, 
   3 
  / \ 
 9  20 
   /  \
  15   7 
return its bottom-up level order traversal as: 
[ [15,7], [9,20], [3] ]
 
{@link: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/ }
return the bottom-up level order"	"levelOrderBottom"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public List<List<Integer>> levelOrderBottom(BinaryTreeNode<Integer> root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        Queue<BinaryTreeNode<Integer>> curLevel = new LinkedList<>();
        curLevel.add(root);
        while (!curLevel.isEmpty()) {
            Queue<BinaryTreeNode<Integer>> nextLevel = new LinkedList<>();
            List<Integer> curList = new ArrayList<>();
            while (!curLevel.isEmpty()) {
                BinaryTreeNode<Integer> node = curLevel.poll();
                curList.add(node.data);
                if (node.left != null) {
                    nextLevel.add(node.left);
                }
                if (node.right != null) {
                    nextLevel.add(node.right);
                }
            }
            // next level
            result.add(0, curList);
            curLevel = nextLevel;
        }
        return result;
    }
}
```"	"binary_tree(int)[root];list(list(int))
[3, 9, 20, null, null, 15, 7];[[15, 7], [9, 20], [3]]
[3, 9, 20, null, null, 15];[[15], [9, 20], [3]]
[3, null, 20, 15];[[15], [20], [3]]
null;[]
"
"Balanced Binary Tree"	"Time : O(N); Space: O(1)
 
Description: 
Given a binary tree, determine if it is height-balanced. 
For this problem, a height-balanced binary tree is defined as a binary 
tree in which the depth of the two subtrees of every node never differ by
more than 1.
 
 
{@link: https://leetcode.com/problems/balanced-binary-tree/ }"	"isBalanced"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public boolean isBalanced(BinaryTreeNode<Integer> root) {
        return maxDepth(root) != -1;
    }
    
    // is tree is balanced, it returns the max depth of tree,
    // return -1 otherwise
    public int maxDepth(BinaryTreeNode<Integer> root) {
        if (root == null) {
            return 0;
        }
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        if (left == -1 || right == -1 || Math.abs(left - right) > 1) {
            return -1;
        }
        return Math.max(left, right) + 1;
    }
}
```"	"binary_tree(int)[root];bool
null;true
[1, null];true
[1, null, 2, null, 3];false
[1, 2, 3];true
[5, 4, 8, 11, null, 13, 4, 7, 2, 5, 1];false
[10, 5, 12, 4, 7];true
[5, null, 4, null, 3, null, 2, null, 1];false
[1, null, 2, 3];false
[5, 4, 8, null, null, 13, 14, null, null, 5, 1];false
[8, 6, 18, 3, 7, 10, 20, null, 5, null, null, null, null, null, null, 4];false
"
"Minimum Depth Of Binary Tree"	"Time : O(N); Space: O(1)
 
Description: 
Given a binary tree, find its minimum depth. 
The minimum depth is the number of nodes along the shortest path from the 
root node down to the nearest leaf node.
 
{@link https://leetcode.com/problems/minimum-depth-of-binary-tree/ }"	"minDepth"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public int minDepth(BinaryTreeNode<Integer> root) {
        // base case
        if (root == null) {
            return 0;
        }
        if (root.left == null && root.right == null) {
            // reach leaf node
            return 1;
        }
        // recursive case
        int depth = Integer.MAX_VALUE;
        if (root.left != null) {
            depth = Math.min(depth, 1 + minDepth(root.left));
        }
        if (root.right != null) {
            depth = Math.min(depth, 1 + minDepth(root.right));
        }
        return depth;
    }
}
```"	"binary_tree(int)[root];int
[3, 9, 20, null, null, 15];2
[3, 9, null, 15];3
[3, null, 9, null, 15];3
[3, 9, 15];2
[3, null];1
"
"Path Sum"	"Time : O(); Space: O()
 
Description: 
Given a binary tree and a sum, determine if the tree has a root-to-leaf 
path such that adding up all the values along the path equals the given sum. 
For example: 
Given the below binary tree and sum = 22,
           5
          / \ 
         4   8 
        /   / \ 
       11  13  4 
      /  \      \ 
     7    2      1
     
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
 
{@link: https://leetcode.com/problems/path-sum/ }"	"hasPathSum"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public boolean hasPathSum(BinaryTreeNode<Integer> root, int sum) {
        // base case
        if (root == null) {
            return false;
        }
        if (root.left == null && root.right == null && root.data == sum) {
            return true;
        }
        // recursive case
        return hasPathSum(root.left, sum - root.data)
                || hasPathSum(root.right, sum - root.data);
    }
}
```"	"binary_tree(int)[root];int[sum];bool
[5, 4, 8, 11, null, 13, 4, 7, 2, null, 1];22;true
[10, 5, 12, 4, 7];22;true
[10, 5, 12, 4, 7];15;false
[5, 4, null, 3, null, 2, null, 1];15;true
[1, null, 2, null, 3, null, 4, null, 5];15;true
[5, null, 4, null, 3, null, 2, null, 1];16;false
[1, null];16;false
[1, null];16;false
null;16;false
[1, 2];1;false
"
"Pascals Triangle"	"Time : O(N^2); Space : O(N^2)
 
Description: 
Given numRows, generate the first numRows of Pascal's triangle. 
For example, given numRows = 5, 
Return 
[       [1], 
       [1,1], 
      [1,2,1], 
     [1,3,3,1], 
    [1,4,6,4,1] 
]
 
{@link https://leetcode.com/problems/pascals-triangle/ }"	"generate"	"### Java
```java
public class Solution {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (numRows <= 0) {
            return result;
        }
        List<Integer> lastRow = new ArrayList<Integer>();
        // push in the 1st row;
        lastRow.add(1);
        result.add(lastRow);

        for (int row = 1; row < numRows; row++) {
            List<Integer> curRow = new ArrayList<Integer>();
            // push in the 1st element in current row
            curRow.add(1);

            for (int i = 0; i < lastRow.size() - 1; i++) {
                // push in element based on rule of pascal's triangle
                curRow.add(lastRow.get(i) + lastRow.get(i + 1));
            }

            // push in the last element in current row
            curRow.add(1);

            // after finish with current row
            result.add(curRow);
            lastRow = curRow;
        }

        return result;
    }
}
```"	"int[numRows];list(list(int))
-1;[]
0;[]
1;[[1]]
4;[[1],[1,1],[1,2,1],[1,3,3,1]]
"
"Pascals Triangle I I"	"Time : O(N^2); Space : O(k)
 
Description:  
Given an index k, return the kth row of the Pascal's triangle. 
For example, given k = 3, 
Return [1,3,3,1]. 
Note: 
Could you optimize your algorithm to use only O(k) extra space?
 
{@link https://leetcode.com/problems/pascals-triangle-ii/ }"	"getRow"	"### Java
```java
public class Solution {

    public List<Integer> getRow(int rowIndex) {
        List<Integer> curRow = new ArrayList<Integer>();
        if (rowIndex < 0) {
            return curRow;
        }
        curRow.add(1);
        for (int row = 0; row < rowIndex; row++) {
            // push in 1 at the end of each row
            curRow.add(1);
            // construct each row from back to front
            for (int i = row; i >= 1; i--) {
                curRow.set(i, curRow.get(i) + curRow.get(i - 1));
            }
        }
        return curRow;
    }
}
```"	"int[rowIndex];list(int)
-1;[]
0;[1]
1;[1,1]
2;[1,2,1]
4;[1,4,6,4,1]
"
"Valid Palindrome"	"Time : O(N); Space: O(1)
 
Description:
 Given a string, determine if it is a palindrome, considering only 
 alphanumeric characters and ignoring cases. 
 
 For example, 
 ""A man, a plan, a canal: Panama"" is a palindrome. 
 ""race a car"" is not a palindrome.
 
 
{@link https://leetcode.com/problems/valid-palindrome/ }"	"isPalindrome"	"### Java
```java
public class Solution {
    public boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (!Character.isLetterOrDigit(s.charAt(i))) {
                i++;
            } else if (!Character.isLetterOrDigit(s.charAt(j))) {
                j--;
            } else { 
                if (Character.toLowerCase(s.charAt(i)) != Character
                        .toLowerCase(s.charAt(j))) {
                    return false;
                }
                i++;
                j--;
            }
        }
        return true;
    }

    // while version
    public boolean isPalindrome_while(String s) {
        int len = s.length();
        // corner case
        int i = 0;
        int j = len - 1;
        while (i < j) {
            // find the next non-empty character from the beginning
            while (i <= j && !Character.isLetterOrDigit(s.charAt(i))) {
                i++;
            }
            // find the next non-empty character from the back
            while (i <= j && !Character.isLetterOrDigit(s.charAt(j))) {
                j--;
            }
            // compare
            if (i <= j
                    && Character.toLowerCase(s.charAt(i)) != Character
                            .toLowerCase(s.charAt(j))) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
```"	"string[s];bool
""A man, a plan, a canal: Panama"";true
""race a car"";false
"""";true
""a"";true
""aaa"";true
""abaa"";false
""\"""";true
"" "";true
"
"Intersection Of Two Linked Lists"	"Time : O(m + n) ; Space: O(1)
 
Description:
 
Write a program to find the node at which the intersection of two singly linked 
lists begins. 
For example, the following two linked lists: 
A:          a1 → a2 
                   ↘ 
                    c1 → c2 → c3 
                  ↗
B:     b1 → b2 → b3 
begin to intersect at node c1. 
Notes: 
If the two linked lists have no intersection at all, return null. 
The linked lists must retain their original structure after the function 
returns.
You may assume there are no cycles anywhere in the entire linked structure. 
Your code should preferably run in O(n) time and use only O(1) memory.
 
{@link https://leetcode.com/problems/intersection-of-two-linked-lists/ }"	"getIntersectionNode"	"### Java
```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {

    /**
     *  Assuming longer list's length is <em>m</em>, shorter list's length is <em>n</em>,
     *  and the distance between intersecting position and list end is <em>l</em>
     *               (m + n - l)
     *                    |
     *  |==========!==|+++!++|
     *                            => two pointers will meet at position (m + n - l)
     *  |+++!++|==========!==|
     *                    |
     *               (m + n - l)
     */
    public ListNode<Integer> getIntersectionNode(ListNode<Integer> headA, ListNode<Integer> headB) {
        int lenA = length(headA), lenB = length(headB);
        // move headA and headB to the same start point
        while (lenA > lenB) {
            headA = headA.next;
            lenA--;
        }
        while (lenA < lenB) {
            headB = headB.next;
            lenB--;
        }
        // find the intersection until end
        while (headA != null && headB != null && headA.data != headB.data) {
            headA = headA.next;
            headB = headB.next;
        }
        return headA;
    }

    private int length(ListNode<Integer> node) {
        int length = 0;
        while (node != null) {
            node = node.next;
            length++;
        }
        return length;
    }
}
```"	"linked_list(int)[headA];linked_list(int)[headB];linked_list(int)
[21,1,22,2,31,3,32,4,33];[11,1,12,2,31,3,32,4,33];[31,32,33]
[21,1,22,2,23,3,31,4,32,5,33];[11,1,12,2,31,3,32,4,33];[31,32,33]
[21,1,22,2,31,3,32,4,33];[11,1,12,2,31,3,32,4,33];[31,32,33]
[11,1,12];[21,1,22,2,23];[]
null;null;[]
null;[1];[]
"
"Compare Version Numbers"	"Time : O(); Space: O()
 
Description:
Compare two version numbers version1 and version2. 
If version1 > version2 return 1, 
if version1 < version2 return -1, otherwise return 0. 
You may assume that the version strings are non-empty and contain only 
digits and the . character. 
The . character does not represent a decimal point and is used to 
separate number sequences. 
For instance, 2.5 is not ""two and a half"" or ""half way to version three"", 
it is the fifth second-level revision of the second first-level revision. 
Here is an example of version numbers ordering: 
     0.1 < 1.1 < 1.2 < 13.37
     
 
{@link https://leetcode.com/problems/compare-version-numbers/ }"	"compareVersion"	"### Java
```java
public class Solution {

    public int compareVersion(String version1, String version2) {
        // trim two strings
        String[] str1 = version1.split(""\\."");
        String[] str2 = version2.split(""\\."");
        int len1 = str1.length;
        int len2 = str2.length;
        int index = 0;
        while (index < len1 && index < len2) {
            int num1 = Integer.parseInt(str1[index]);
            int num2 = Integer.parseInt(str2[index]);
            if (num1 != num2) {
                return (num1 - num2) > 0 ? 1 : -1;
            }
            index++;
        }
        // checking the remaining part is all 0s
        if (index < len1) {
            return checkRemain(str1, index) ? 1 : 0;
        } else {
            return checkRemain(str2, index) ? -1 : 0;
        }
    }

    // check from index to end
    private boolean checkRemain(String[] str, int index) {
        int len = str.length;
        for (int i = index; i < len; i++) {
            if (Integer.parseInt(str[i]) != 0) {
                return true;
            }
        }
        return false;
    }
}
```"	"string[version1];string[version2];int
""1.1"";""1.2"";-1
""0.1"";""1.12"";-1
""13.1"";""1.12"";1
""000.1"";""1.000"";-1
""01.1"";""1"";1
""01.001"";""1.1"";0
""01.001.2555"";""1.1.2556"";-1
""01.001.2555"";""1.1.2554"";1
""1."";""1."";0
""1.0"";""1."";0
""1.0.0"";""1."";0
""1.0.0.0.0"";""1.0"";0
""1.0.0.0.01"";""1.0"";1
"
"Excel Sheet Column Title"	"Time : O(N); Space : O(1)
 
Description: 
Given a positive integer, return its corresponding column title as 
appear in an Excel sheet. 
For example: 
 1 -> A 
 2 -> B 
 3 -> C 
 ... 
 26 -> Z 
 27 -> AA 
 28 -> AB 
 
{@link https://leetcode.com/problems/excel-sheet-column-title/ }"	"convertToTitle"	"### Java
```java
public class Solution {
    
    private int BASE = 26;
    
    private int OFFSET = 1;
    
    public String convertToTitle(int n) {
        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            char c = (char) ((n - OFFSET) % BASE + 'A');
            sb.append(c);
            n = (n - OFFSET) / BASE;
        }
        return sb.reverse().toString();
    }
}
```"	"int[n];string
26;""Z""
1;""A""
702;""ZZ""
27;""AA""
52;""AZ""
"
"Excel Sheet Column Number"	"Time : O(N); Space : O(1)
 
Description: 
Given a column title as appear in an Excel sheet, return its 
corresponding column number. 
For example: 
 A -> 1 
 B -> 2 
 C -> 3 
 ... 
 Z -> 26 
 AA -> 27 
 AB -> 28 
 
{@link https://leetcode.com/problems/excel-sheet-column-number/ }"	"titleToNumber"	"### Java
```java
public class Solution {
    
    private int BASE = 26;

    public int titleToNumber(String s) {
        int result = 0;
        for (char ch : s.toCharArray()) {
            result = result * BASE + (ch - 'A' + 1);  
        }
        return result;
    }
}
```"	"string[s];int
""A"";1
""Z"";26
""AA"";27
""AZ"";52
""ZZ"";702
"
"Factorial Trailing Zeroes"	"Time : O(); Space : O()
 
Description: 
Given an integer n, return the number of trailing zeroes in n!. 
Note: Your solution should be in logarithmic time complexity.
 
{@link https://leetcode.com/problems/factorial-trailing-zeroes/ }"	"trailingZeroes"	"### Java
```java
public class Solution {
    /**
     * each 2 * 5 will generate one 10, which adding one more 
     * trailing 0. And we have more 2 than 5 in n!, so our job
     * is to count the number of 5s in n!'s factors 
     */
    public int trailingZeroes(int n) {
        int numberOf5 = 0;
        while (n != 0) {
            int count = n / 5;
            numberOf5 += count; 
            n = count;
        }
        return numberOf5;
    }
}
```"	"int[n];int
4617;1151
26;6
1;0
-1;0
100;24
25;6
"
"Rotate Array"	"Time : O(N); Space : O(N)
 
Description: 
Rotate an array of n elements to the right by k steps. 
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4]. 
Note: 
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem. 
 
{@link https://leetcode.com/problems/rotate-array/ }"	"rotate"	"### Java
```java
public class Solution {

    /*
     *  1  2  3  4               13  9  5 1               13  9 5 1
     *  5  6  7  8  outer loop   14  6  7 2  inner loop   14 10 6 2
     *  9 10 11 12 ============> 15 10 11 3 ============> 15 11 7 3
     * 13 14 15 16               16 12  8 4               16 12 8 4
     */
    public int[][] rotate(int[][] matrix) {
        int n = matrix.length;
        if (n == 0) {
            return matrix;
        }
        int half = n / 2;
        // for each loop
        for (int i = 0; i < half; i++) {
            int startIndex = i;
            int endIndex = startIndex + (n - 2 * i) - 1;
            // in one row, we leave the last number unchanged
            // so it is j < endIndex, not j <= endIndex
            for (int offset = 0; startIndex + offset < endIndex; offset++) {
                // number in the first row
                int temp1 = matrix[startIndex][startIndex + offset];
                // number in the last column
                int temp2 = matrix[startIndex + offset][endIndex];
                // number in the last row
                int temp3 = matrix[endIndex][endIndex - offset];
                // number in the first column
                int temp4 = matrix[endIndex - offset][startIndex];

                matrix[startIndex][startIndex + offset] = temp4;
                matrix[startIndex + offset][endIndex] = temp1;
                matrix[endIndex][endIndex - offset] = temp2;
                matrix[endIndex - offset][startIndex] = temp3;

            }
        }
        return matrix;
    }
}
```"	"array(array(int))[matrix];array(array(int))
[[1, 2, 3], [4, 5, 6], [7, 8, 9]];[[7, 4, 1], [8, 5, 2], [9, 6, 3]]
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];[[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]];[[21, 16, 11, 6, 1], [22, 17, 12, 7, 2], [23, 18, 13, 8, 3], [24, 19, 14, 9, 4], [25, 20, 15, 10, 5]]
[[2, 29, 20, 26, 16, 28], [12, 27, 9, 25, 13, 21], [32, 33, 32, 2, 28, 14], [13, 14, 32, 27, 22, 26], [33, 1, 20, 7, 21, 7], [4, 24, 1, 6, 32, 34]];[[4, 33, 13, 32, 12, 2], [24, 1, 14, 33, 27, 29], [1, 20, 32, 32, 9, 20], [6, 7, 27, 2, 25, 26], [32, 21, 22, 28, 13, 16], [34, 7, 26, 14, 21, 28]]
"
"Remove Linked List Elements"	"Time : O(N); Space : O(1)
{@link https://leetcode.com/problems/remove-linked-list-elements/ }"	"removeElements"	"### Java
```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {
    public ListNode<Integer> removeElements(ListNode<Integer> head, int val) {
        ListNode<Integer> dummy = new ListNode<>();
        dummy.data = -1;
        dummy.next = head;
        ListNode<Integer> pre = dummy;
        ListNode<Integer> node = dummy.next;
        while (node != null) {
            if (node.data == val) {
                // delete current node
                pre.next = node.next;
            } else {
                pre = pre.next;
            }
            // go to next node
            node = node.next;
        }
        return dummy.next;
    }
}
```"	"linked_list(int)[head];int[val];linked_list(int)
[];6;[]
[1, 1, 2, 2, 6, 3, 3, 4, 4, 5, 5, 6, 6];6;[1, 2, 3, 4, 5]
[1, 1, 1, 2, 1, 3, 1];1;[]
[1, 1, 1, 2, 2, 3, 3];1;[2, 3]
[1, 1, 1, 2, 2, 3, 3];2;[1, 1, 3]
"
"Count Primes"	"Time : O(); Space : O()
 
Description: 
Count the number of prime numbers less than a non-negative number, n.
 
{@link https://leetcode.com/problems/count-primes/ }"	"countPrimes"	"### Java
```java
public class Solution {

    /**
     * Sieve algorithm. For each prime number, delete all numbers that
     * has this prime number as one factor.
     */
    public int countPrimes(int n) {
        if (n < 2) {
            return 0;
        }
        int[] primes = new int[n];
        primes[0] = 0; // number 0 is not prime number
        primes[1] = 0; // number 1 is not prime number
        int len = primes.length;
        // initialize prime array
        for (int i = 2; i < len; i++) {
            primes[i] = 1;
        }
        
        int upper = (int) Math.sqrt(n);
        // if a number want to be defactored as A * B = n, then 
        // at least one number from A and B is less than or equal to Sqrt(n)
        for (int i = 2; i <= upper; i++) {
            if (primes[i] == 1) {
                // all numbers that have primes[i] as one factor
                // is not a prime number
                for (int j = 2; j * i < n; j++) {
                    primes[i * j] = 0;
                }
            }
        }
        
        // count number of prime numbers
        int result = 0;
        for (int number : primes) {
            if (number == 1) {
                result++;
            }
        }
        return result;
    }
}
```"	"int[n];int
2;0
20;8
1;0
200;46
500;95
-10;0
"
"Reverse Linked List"	"Time : O(N); Space : O(1)
  
Description: 
Reverse a singly linked list.
 
{@link https://leetcode.com/problems/reverse-linked-list/ }"	"reverseList"	"### Java
```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {

    public ListNode<Integer> reverseList(ListNode<Integer> head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode<Integer> next = head.next;
        ListNode<Integer> rHead = reverseList(next);
        next.next = head;
        head.next = null;
        return rHead;
    }
}
```"	"linked_list(int)[head];linked_list(int)
[];[]
[1];[1]
[1,1,2,2,3,3,4];[4,3,2,1]
[4,1,3,2,2,3,1];[1,2,3,4]
[1,1,1,2,1,3,1];[1,1,1,1]
[1,1,1,2,2,3,2,4,2];[2,2,2,1,1]
"
"Contains Duplicate"	"Time : O(); Space: O()
 
Description: 
Given an array of integers, find if the array contains any duplicates. 
Your function should return true if any value appears at least twice 
in the array, and it should return false if every element is distinct.
 
{@link https://leetcode.com/problems/contains-duplicate/ }"	"containsDuplicate"	"### Java
```java
public class Solution {

    public boolean containsDuplicate(int[] nums) {
        Set<Integer> appeared = new HashSet<>();
        for (int num : nums) {
            if (appeared.contains(num)) {
                return true;
            }
            appeared.add(num);
        }
        return false;
    }
}
```"	"array(int)[nums];bool
[];false
[1];false
[1, 2];false
[1, 1];true
[1, 2, 3, 4];false
[1, 2, 3, 1];true
[1, 2, 1, 3];true
"
"Contains Duplicate I I"	"Time : O(N); Space: O(N)
 
Description:
 
Given an array of integers and an integer k, find out whether there there
are two distinct indices i and j in the array such that nums[i] = nums[j] 
and the difference between i and j is at most k.
 
{@link https://leetcode.com/problems/contains-duplicate-ii/ }"	"containsNearbyDuplicate"	"### Java
```java
public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        if (k < 0 || nums.length == 0) {
            return false;
        }
        Map<Integer, Integer> posMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (posMap.containsKey(num) && (i - posMap.get(num) <= k)) {
                return true;
            }
            posMap.put(num, i);
        }
        return false;
    }
}
```"	"array(int)[nums];int[k];bool
[];2;false
[1];2;false
[1,2];2;false
[1,1];2;true
[1,2,3,4];5;false
[1,2,3,1];2;false
[1,2,1,3];1;false
[1,2,1,3];2;true
[1,2,1,3];7;true
"
"Rectangle Area"	"Time : O(1) ; Space: O(1)
 
Description:
Find the total area covered by two rectilinear rectangles in a 2D plane. 
Each rectangle is defined by its bottom left corner and top right corner as 
shown in the figure.
 
{@link https://leetcode.com/problems/rectangle-area/ }"	"computeArea"	"### Java
```java
public class Solution {
    
    // two areas - overlapping area
    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        int x1 = Math.max(A, E);
        int x2 = Math.min(C, G);
        int y1 = Math.max(B, F);
        int y2 = Math.min(D, H);
        int overlap = (x2 > x1 && y2 > y1) ? (x2 - x1) * (y2 - y1) : 0;
        return (C - A) * (D - B) + (G - E) * (H - F) - overlap;
    }
}
```"	"int[a];int[b];int[c];int[d];int[e];int[f];int[g];int[h];int
-3;0;3;4;0;-1;9;2;45
0;0;0;0;-1;-1;1;1;4

"
"Summary Ranges"	"Time : O(N); Space : O(N)
 
Description: 
Given a sorted integer array without duplicates, return the summary of its ranges. 
For example, given [0,1,2,4,5,7], return [""0->2"",""4->5"",""7""].
 
{@link https://leetcode.com/problems/summary-ranges/  }"	"summaryRanges"	"### Java
```java
public class Solution {

    public List<String> summaryRanges(int[] nums) {
        List<String> result = new ArrayList<>();
        // index of which number we are checking
        int index = 0;
        int len = nums.length;
        while (index < len) {
            int start = index;   // start index of current range
            while (index + 1 < len && nums[index + 1] == nums[index] + 1) {
                index++;         // range is enlarging
            }
            if (index > start) { // we meet a range
                result.add(nums[start] + ""->"" + nums[index]);
            } else {            // we meet a single number
                result.add(nums[start] + """");
            }
            index++;
        }
        return result;
    }
}
```"	"array(int)[nums];list(string)
[0, 1, 2, 4, 5, 7];[""0->2"",""4->5"",""7""]
[0];[""0""]
[0, 1, 2, 3];[""0->3""]
[1, 3, 5, 7];[""1"",""3"",""5"",""7""]
[1, 2, 3, 5, 6, 7];[""1->3"",""5->7""]
"
"Power Of Two"	"Time : O() ; Space: O()
 
Description:
 
Given an integer, write a function to determine if it is a power of two.
 
{@link https://leetcode.com/problems/power-of-two/ }"	"isPowerOfTwo"	"### Java
```java
public class Solution {

    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
```"	"int[n];bool
2;true
4;true
1024;true
1023;false
23;false
22;false
"
"Lowest Common Ancestor Of A Binary Search Tree"	"Time : O(lgN) ; Space: O(1)
 
Description:
 
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two 
given nodes in the BST. 
According to the definition of LCA on Wikipedia: “The lowest common ancestor 
is defined between two nodes v and w as the lowest node in T that has both 
v and w as descendants (where we allow a node to be a descendant of itself).” 
     _______6______
    /              \
 ___2__          ___8__
/      \        /      \
0      _4       7       9
       /  \
      3   5
      
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another 
example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of 
itself according to the LCA definition.
 
{@link https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/ }"	"lowestCommonAncestor"	"### Java
```java
class BinaryTreeNode<T> {
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;

    public BinaryTreeNode() { }

    public BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    /** As long as two nodes are in the subtree, go to that subtree to search */
    public BinaryTreeNode<Integer> lowestCommonAncestor(BinaryTreeNode<Integer> root, BinaryTreeNode<Integer> p, BinaryTreeNode<Integer> q) {
        while ((root.data - p.data) * (root.data - q.data) > 0) {
            // p and q are under the same sub-tree
            root = root.data > p.data ? root.left : root.right;
        }
        return root;
    }
}
```"	"binary_tree(int)[root];binary_tree(int)[p];binary_tree(int)[q];binary_tree(int)
[6, 2, 8, 0, 4, 7, 9, null, null, 3, 5];[2, 0, 4, null, null, 3, 5];[4, 3, 5];[2, 0, 4, null, null, 3, 5]
[6, 2, 8, 0, 4, 7, 9, null, null, 3, 5];[2, 0, 4, null, null, 3, 5];[8, 7, 9];[6, 2, 8, 0, 4, 7, 9, null, null, 3, 5]
[6, 2, 8, 0, 4, 7, 9, null, null, 3, 5];[4, 3, 5];[9, null];[6, 2, 8, 0, 4, 7, 9, null, null, 3, 5]
"
"Valid Anagram"	"Time : O() ; Space: O()
 
Description:
Given two strings s and t, write a function to determine if t is an anagram of s. 
For example, 
 s = ""anagram"", t = ""nagaram"", return true. 
 s = ""rat"", t = ""car"", return false. 
Note: You may assume the string contains only lowercase alphabets.
 
{@link https://leetcode.com/problems/valid-anagram/ }"	"isAnagram"	"### Java
```java
public class Solution {

    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        // since input contains only lowercase alphabets
        int[] counts = new int[26];
        
        // count character occurrence
        for (int i = 0; i < s.length(); i++) {
            counts[s.charAt(i) - 'a']++;
            counts[t.charAt(i) - 'a']--;
        }
        
        // check
        for (int i = 0; i < 26; i++) {
            if (counts[i] != 0) {
                return false;
            }
        }
        return true;
    }
}
```"	"string[s];string[t];bool
"""";"""";true
""anagram"";""nagaram"";true
""rat"";""car"";false
""aanagram"";""nagaram"";false
"
"Strobogrammatic Number"	"Time : O() ; Space: O()
 
Description:
A strobogrammatic number is a number that looks the same when rotated 
180 degrees (looked at upside down). 
Write a function to determine if a number is strobogrammatic. 
The number is represented as a string. 
For example, the numbers ""69"", ""88"", and ""818"" are all strobogrammatic.
 
{@link https://leetcode.com/problems/strobogrammatic-number/ }"	"isStrobogrammatic"	"### Java
```java
public class Solution {
    
    private static final Map<Character, Character> map = new HashMap<Character, Character>() {
        {
            put('6', '9');
            put('9', '6');
            put('0', '0');
            put('1', '1');
            put('8', '8');
        }
    };

    public boolean isStrobogrammatic(String num) {
        for (int i = 0, j = num.length() - 1; i <= j ; i++, j--) {
            char ch = num.charAt(i);
            if (!map.containsKey(ch) || map.get(ch) != num.charAt(j)) {
                return false;
            }
        }
        return true;
    }
}
```"	"string[num];bool
""69"";true
""88"";true
""818"";true
""88"";true
""66"";false
""8998"";false
""2"";false
"
"Meeting Rooms"	"Time : O(NlgN) ; Space: O(1)
 
Description:
Given an array of meeting time intervals consisting of start and end times 
[[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings. 
For example, 
Given [[0, 30],[5, 10],[15, 20]], 
return false.
 
{@link https://leetcode.com/problems/meeting-rooms/ }"	"canAttendMeetings"	"### Java
```java
class Interval {
    int start;
    int end;
}

public class Solution {

    public boolean canAttendMeetings(Interval[] intervals) {
        Arrays.sort(intervals, new Comparator<Interval>() {
            @Override
            public int compare(Interval i1, Interval i2) {
                return i1.start != i2.start ? i1.start - i2.start : i1.end - i2.end;
            }
        });
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i].start < intervals[i - 1].end) {
                return false;
            }
        }
        return true;
    }
}
```"	"array(object(int[start],int[end])<Interval>)[intervals];bool
[ [0, 30], [5, 10], [15, 20] ];false
[ [5, 10], [15, 20] ];true
"
"First Bad Version"	"Time : O(lgN) ; Space: O(1)
 
Description:
You are a product manager and currently leading a team to develop a new 
product. Unfortunately, the latest version of your product fails the 
quality check. Since each version is developed based on the previous 
version, all the versions after a bad version are also bad. 
Suppose you have n versions [1, 2, ..., n] and you want to find out the 
first bad one, which causes all the following ones to be bad. 
You are given an API bool isBadVersion(version) which will return whether 
version is bad. Implement a function to find the first bad version. You 
should minimize the number of calls to the API.
 
{@link https://leetcode.com/problems/first-bad-version/ }"	"firstBadVersion"	"### Java
```java
public class Solution {

    public int firstBadVersion(int n, boolean[] versions) {
        int left = 1;
        int right = n;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isBadVersion(mid, versions)) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return right + 1 > n ? 0 : right + 1;
    }

    private boolean isBadVersion(int n, boolean[] versions) {
        return versions[n - 1];
    }
}
```"	"int[n];array(bool)[versions];int
1;[true];1
2;[false, true];2
2;[true, true];1
3;[false, false, false];0
6;[false, false, false, true, true, true];4
"
"Move Zeroes"	"Time : O(N) ; Space: O(1)
 
Description:
Given an array nums, write a function to move all 0's to the end of it 
while maintaining the relative order of the non-zero elements. 
For example, given nums = [0, 1, 0, 3, 12], after calling your function, 
nums should be [1, 3, 12, 0, 0]. 
Note: 
You must do this in-place without making a copy of the array. 
Minimize the total number of operations.
 
{@link https://leetcode.com/problems/move-zeroes/ }"	"moveZeroes"	"### Java
```java
public class Solution {

    // x, x, x, 0, 0, 0, y  =>  x, x, x, y, 0, 0, 0
    //          j        i                  j
    // swap nums[i] with nums[j] 
    public int[] moveZeroes(int[] nums) {
        int j = -1; // index of first 0 in array
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (j == -1) {
                    j = i;
                }
            } else {
                if (j != -1) {
                    // swap with first 0 in array
                    nums[j++] = nums[i];
                    nums[i] = 0;
                }
            }
        }
        return nums;
    }
}
```"	"array(int)[nums];array(int)
[ 0, 1, 0, 3, 12 ];[ 1, 3, 12, 0, 0 ]
[ 4, 3, 2, 0, 0, 0 ];[ 4, 3, 2, 0, 0, 0 ]
[ 0, 0, 0, 4, 2, 1 ];[ 4, 2, 1, 0, 0, 0 ]
[ 3, 1, 2 ];[ 3, 1, 2 ]
[ 0, 0 ];[ 0, 0 ]
[ 0];[ 0]
[ 1];[ 1]
"
