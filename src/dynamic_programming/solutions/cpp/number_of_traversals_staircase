```cxx
#include <memory>
#include <vector>
using std::make_unique;
using std::vector;

class Solution {
public:
    int numberOfWaysToTop(int top, int maximum_step) {
        return computeNumberOfWaysToH(top, maximum_step,
                                      make_unique<vector<int>>(top + 1, 0).get());
    }
private:
    int computeNumberOfWaysToH(int h, int maximum_step,
                               vector<int> *number_of_ways_to_h_ptr) {
        if (h <= 1) {
            return 1;
        }
    
        vector<int> &number_of_ways_to_h = *number_of_ways_to_h_ptr;
        if (number_of_ways_to_h[h] == 0) {
            for (int i = 1; i <= maximum_step && h - i >= 0; ++i) {
                number_of_ways_to_h[h] +=
                        computeNumberOfWaysToH(h - i, maximum_step, number_of_ways_to_h_ptr);
            }
        }
        return number_of_ways_to_h[h];
    }
};
```