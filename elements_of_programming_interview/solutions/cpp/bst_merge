```cxx
template <typename T>

class BinaryTreeNode {
public:
    T data;
    shared_ptr<BinaryTreeNode<T>> left;
    shared_ptr<BinaryTreeNode<T>> right;

    BinaryTreeNode() { }

    BinaryTreeNode(T data, shared_ptr<BinaryTreeNode<T>> left, shared_ptr<BinaryTreeNode<T>> right) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
};

class Solution {
private:
    shared_ptr<BinaryTreeNode<int>> head;

    shared_ptr<BinaryTreeNode<int>> mergeTwoSortedLinkedLists(shared_ptr<BinaryTreeNode<int>> A, shared_ptr<BinaryTreeNode<int>> B) {
        shared_ptr<BinaryTreeNode<int>> dummyHead = make_shared<BinaryTreeNode<int>>();
        shared_ptr<BinaryTreeNode<int>> current = dummyHead;
        shared_ptr<BinaryTreeNode<int>> p1 = A;
        shared_ptr<BinaryTreeNode<int>> p2 = B;

        while (p1 != nullptr && p2 != nullptr) {
            if (p1->data < p2->data) {
                current->right = p1;
                p1 = p1->right;
            } else {
                current->right = p2;
                p2 = p2->right;
            }
            current = current->right;
        }

        if (p1 != nullptr) {
            current->right = p1;
        }
        if (p2 != nullptr) {
            current->right = p2;
        }
        return dummyHead->right;
    }

    // Count the list length till end.
    int countLength(shared_ptr<BinaryTreeNode<int>> L) {
        int length = 0;
        while (L != nullptr) {
            ++length;
            L = L->right;
        }
        return length;
    }

    shared_ptr<BinaryTreeNode<int>> bstToDoublyLinkedList(shared_ptr<BinaryTreeNode<int>> n) {
        // Empty subtree.
        if (n == nullptr) {
            return nullptr;
        }

        // Recursively build the list from left and right subtrees.
        shared_ptr<BinaryTreeNode<int>> lHead = bstToDoublyLinkedList(n->left);
        shared_ptr<BinaryTreeNode<int>> rHead = bstToDoublyLinkedList(n->right);

        // Append n to the list from left subtree.
        shared_ptr<BinaryTreeNode<int>> lTail = nullptr;
        if (lHead != nullptr) {
            lTail = lHead->left;
            lTail->right = n;
            n->left = lTail;
            lTail = n;
        } else {
            lHead = lTail = n;
        }

        // Append the list from right subtree to n.
        shared_ptr<BinaryTreeNode<int>> rTail = nullptr;
        if (rHead != nullptr) {
            rTail = rHead->left;
            lTail->right = rHead;
            rHead->left = lTail;
        } else {
            rTail = lTail;
        }
        rTail->right = lHead;
        lHead->left = rTail;

        return lHead;
    }

    shared_ptr<BinaryTreeNode<int>> buildSortedDoublyLinkedList(shared_ptr<BinaryTreeNode<int>> L, int n) {
        head = L;
        return buildSortedDoublyLinkedListHelper(0, n);
    }

    shared_ptr<BinaryTreeNode<int>> buildSortedDoublyLinkedListHelper(int s, int e) {
        if (s >= e) {
            return nullptr;
        }

        int m = s + ((e - s) / 2);
        shared_ptr<BinaryTreeNode<int>> left = buildSortedDoublyLinkedListHelper(s, m);
        shared_ptr<BinaryTreeNode<int>> curr = make_shared<BinaryTreeNode<int>>();
        curr->data = head->data;
        head = head->right;
        curr->left = left;
        curr->right = buildSortedDoublyLinkedListHelper(m + 1, e);
        return curr;
    }

public:
    shared_ptr<BinaryTreeNode<int>> mergeTwoBSTs(shared_ptr<BinaryTreeNode<int>> A, shared_ptr<BinaryTreeNode<int>> B){
        A = bstToDoublyLinkedList(A);
        B = bstToDoublyLinkedList(B);
        A->left->right = nullptr;
        B->left->right = nullptr;
        A->left = nullptr;
        B->left = nullptr;

        int ALength = countLength(A);
        int BLength = countLength(B);

        return buildSortedDoublyLinkedList(mergeTwoSortedLinkedLists(A, B),
                ALength + BLength);
    }
};
```