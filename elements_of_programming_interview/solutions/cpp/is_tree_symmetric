```cxx
template <typename T>

struct BinaryTreeNode {
    T data;
    shared_ptr<BinaryTreeNode<T>> left;
    shared_ptr<BinaryTreeNode<T>> right;
    BinaryTreeNode() { }
    BinaryTreeNode(T data, shared_ptr<BinaryTreeNode<T>> left, shared_ptr<BinaryTreeNode<T>> right) {
        this->data = data;
        this->left = left;
        this->right = right;
    }
};

class Solution {
public:
    bool isSymmetric(const shared_ptr<BinaryTreeNode<int>> &tree) {
        return tree == nullptr || CheckSymmetric(tree->left, tree->right);
    }
    
    bool CheckSymmetric(const shared_ptr<BinaryTreeNode<int>> &subtree_0,
                        const shared_ptr<BinaryTreeNode<int>> &subtree_1) {
        if (subtree_0 == nullptr && subtree_1 == nullptr) {
            return true;
        } else if (subtree_0 != nullptr && subtree_1 != nullptr) {
            return subtree_0->data == subtree_1->data &&
                   CheckSymmetric(subtree_0->left, subtree_1->right) &&
                   CheckSymmetric(subtree_0->right, subtree_1->left);
        }
        // One subtree is empty, and the other is not.
        return false;
    }
};
```