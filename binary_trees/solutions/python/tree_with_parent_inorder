```python
T = TypeVar('T')

class BinaryTreeNode(Generic[T]):
    def __init__(self, data: Optional[Type[T]]=None, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
        self.parent = None

def inorder_traversal(tree):
    tree = convert_binary_tree_to_binary_tree_with_parent(tree)
    prev, result = None, []
    while tree:
        if prev is tree.parent:
            # We came down to tree from prev.
            if tree.left:  # Keep going left.
                next = tree.left
            else:
                result.append(tree.data)
                # Done with left, so go right if right is not empty. Otherwise,
                # go up.
                next = tree.right or tree.parent
        elif tree.left is prev:
            # We came up to tree from its left child.
            result.append(tree.data)
            # Done with left, so go right if right is not empty. Otherwise, go
            # up.
            next = tree.right or tree.parent
        else:  # Done with both children, so move up.
            next = tree.parent

        prev, tree = tree, next
    return result

def convert_binary_tree_to_binary_tree_with_parent(tree):
    def add_parent_link(node, parent):
        if not node:
            return None
        node.parent = parent
        add_parent_link(node.left, node)
        add_parent_link(node.right, node)

    add_parent_link(tree, None)
    return tree
```