```cxx
#include <iterator>
#include <queue>
#include <string>
#include <unordered_set>
using std::queue;
using std::string;
using std::unordered_set;

class Solution {
public:
    // Uses BFS to find the least steps of transformation.
    int transformString(vector<string> V, const string &s, const string &t) {
        struct StringWithDistance {
            string candidate_string;
            int distance;
        };
        queue<StringWithDistance> q;
        unordered_set<string> D(V.begin(), V.end());
        D.erase(s);  // Marks s as visited by erasing it in D.
        q.emplace(StringWithDistance{s, 0});
    
        while (!q.empty()) {
            StringWithDistance f(q.front());
            // Returns if we find a match.
            if (f.candidate_string == t) {
                return f.distance;  // Number of steps reaches t.
            }
    
            // Tries all possible transformations of f.candidate_string.
            string str = f.candidate_string;
            for (int i = 0; i < str.size(); ++i) {
                for (int c = 0; c < 26; ++c) {  // Iterates through 'a' ~ 'z'.
                    str[i] = 'a' + c;
                    if (auto it = D.find(str); it != end(D)) {
                        D.erase(it);
                        q.emplace(StringWithDistance{str, f.distance + 1});
                    }
                }
                str[i] = f.candidate_string[i];  // Reverts the change of str.
            }
            q.pop();
        }
    
        return -1;  // Cannot find a possible transformations.
    }
};
```