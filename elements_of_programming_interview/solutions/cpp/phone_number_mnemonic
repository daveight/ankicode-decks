```cxx
#include <array>
#include <memory>
#include <string>
#include <vector>
using std::array;
using std::make_shared;
using std::string;
using std::vector;

const int kNumTelDigits = 10;

// The mapping from digit to corresponding characters.
const array<string, kNumTelDigits> kMapping = {
    {"0", "1", "ABC", "DEF", "GHI", "JKL", "MNO", "PQRS", "TUV", "WXYZ"}};

class Solution {
public:
    vector<string> phoneMnemonic(const string &phone_number) {
        vector<string> mnemonics;
        phoneMnemonicHelper(phone_number, 0,
                            make_shared<string>(phone_number.size(), 0).get(),
                            &mnemonics);
        return mnemonics;
    }

    void phoneMnemonicHelper(const string &phone_number, int digit,
                             string *partial_mnemonic, vector<string> *mnemonics) {
        if (digit == phone_number.size()) {
            // All digits are processed, so add partial_mnemonic to mnemonics.
            // (We add a copy since subsequent calls modify partial_mnemonic.)
            mnemonics->emplace_back(*partial_mnemonic);
        } else {
            // Try all possible characters for this digit.
            for (char c : kMapping[phone_number[digit] - '0']) {
                (*partial_mnemonic)[digit] = c;
                phoneMnemonicHelper(phone_number, digit + 1, partial_mnemonic, mnemonics);
            }
        }
    }
};
```