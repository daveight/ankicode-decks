```java
class ListNode<T> {
    T data;
    ListNode<T> next;

    public ListNode() { }

    public ListNode(T data, ListNode<T> next) {
        this.data = data;
        this.next = next;
    }
}

public class Solution {

    public ListNode<Integer> rotateRight(ListNode<Integer> head, int k) {
        if (head == null) {
            return head;
        }

        // create dummy head
        ListNode dummy = new ListNode<Integer>();
        dummy.data = -1;
        dummy.next = head;
        ListNode fast = dummy;
        ListNode slow = dummy;

        // count the length of list
        int len = 0;
        while (fast.next != null) {
            len++;
            fast = fast.next;
        }
        fast = dummy;

        k = k % len;
        if (k != 0) {
            // let fast pointer itself moves k steps
            for (int i = 0; i < k; i++) {
                fast = fast.next;
            }
            // let fast and slow move together until fast reaches the last node
            while (fast.next != null) {
                fast = fast.next;
                slow = slow.next;
            }
            // reconnect
            fast.next = dummy.next;
            dummy.next = slow.next;
            slow.next = null;
        }

        return dummy.next;
    }
}
```