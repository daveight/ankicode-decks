```cxx
#include <memory>
#include <vector>

using std::make_unique;
using std::vector;

class Solution {
private:
    void directedCombinations(int n, int k, int offset,
                              vector<int>* partial_combination,
                              vector<vector<int>>* result) {
        if (partial_combination->size() == k) {
            result->emplace_back(*partial_combination);
            return;
        }

        // Generate remaining combinations over {offset, ..., n - 1} of size
        // num_remaining.
        const int num_remaining = k - partial_combination->size();
        for (int i = offset; i <= n && num_remaining <= n - i + 1; ++i) {
            partial_combination->emplace_back(i);
            directedCombinations(n, k, i + 1, partial_combination, result);
            partial_combination->pop_back();
        }
    }
public:
    vector<vector<int>> combinations(int n, int k) {
        vector<vector<int>> result;
        directedCombinations(n, k, 1, make_unique<vector<int>>().get(), &result);
        return result;
    }
};
```