```cxx
#include <iterator>
#include <stack>
#include <string>
#include <unordered_map>

using std::stack;
using std::string;
using std::unordered_map;

class Solution {
public:
    bool isWellFormed(const string &s) {
        stack<char> left_chars;
        const unordered_map<char, char> kLookup = {
                {'(', ')'},
                {'{', '}'},
                {'[', ']'}};
        for (int i = 0; i < s.size(); ++i) {
            if (kLookup.count(s[i])) {
                left_chars.emplace(s[i]);
            } else {
                if (left_chars.empty() || kLookup.at(left_chars.top()) != s[i]) {
                    // Unmatched right char or mismatched chars.
                    return false;
                }
                left_chars.pop();
            }
        }
        return left_chars.empty();
    }
};
```