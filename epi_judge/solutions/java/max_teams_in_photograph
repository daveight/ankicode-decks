```java
import java.util.ArrayList;
import java.util.List;

class Edge {
    int fr;
    int to;
}

public class Solution {
    public class GraphVertex {
        public List<GraphVertex> edges = new ArrayList<>();
        // Set maxDistance = 0 to indicate unvisited vertex.
        public int maxDistance = 0;
    }

    public int findLargestNumberTeams(int k, List<Edge> edges) {
        if (k <= 0) {
            throw new RuntimeException("Invalid k value");
        }
        List<GraphVertex> graph = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            graph.add(new GraphVertex());
        }
        for (Edge e : edges) {
            if (e.fr < 0 || e.fr >= k || e.to < 0 || e.to >= k) {
                throw new RuntimeException("Invalid vertex index");
            }
            graph.get(e.fr).edges.add(graph.get(e.to));
        }
        int maxLevel = 0;
        for (GraphVertex g : graph) {
            if (g.maxDistance == 0) {
                maxLevel = Math.max(maxLevel, dfs(g));
            }
        }
        return maxLevel;
    }

    private int dfs(GraphVertex curr) {
        curr.maxDistance = 1;
        for (GraphVertex vertex : curr.edges) {
            curr.maxDistance = Math.max(
                curr.maxDistance, (vertex.maxDistance != 0 ? vertex.maxDistance : dfs(vertex)) + 1);
        }
        return curr.maxDistance;
    }
}
```