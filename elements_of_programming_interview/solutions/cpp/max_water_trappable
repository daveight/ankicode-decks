```cxx
#include <algorithm>
#include <iterator>
#include <limits>
#include <vector>
using std::distance;
using std::numeric_limits;
using std::vector;

class Solution {
public:
    int calculateTrappingWater(const vector<int> &heights) {
        // Finds the index with maximum height.
        int max_h =
                distance(begin(heights), max_element(begin(heights), end(heights)));
        return TrappingWaterTillEnd(begin(heights), begin(heights) + max_h) +
               TrappingWaterTillEnd(rbegin(heights),
                                    rbegin(heights) + heights.size() - 1 - max_h);
    }
    
    // Assume end is maximum height.
    template<typename Iter>
    int TrappingWaterTillEnd(Iter begin, Iter end) {
        int sum = 0, highest_level_seen = numeric_limits<int>::min();
        for (Iter iter = begin; iter != end; ++iter) {
            if (*iter >= highest_level_seen) {
                highest_level_seen = *iter;
            } else {
                sum += highest_level_seen - *iter;
            }
        }
        return sum;
    }
};
```